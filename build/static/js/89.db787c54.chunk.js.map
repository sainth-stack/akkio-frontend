{"version":3,"file":"static/js/89.db787c54.chunk.js","mappings":"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","sources":["webpack://keypulse/./src/pages/genAi/styles/AnswersAccordion.module.css?abce","pages/genAi/components/answers.js","webpack://keypulse/./src/pages/genAi/styles/SampleQuestion.module.css?4da4","pages/genAi/components/questions.js","webpack://keypulse/./src/pages/genAi/styles/columnDescription.module.css?facc","pages/genAi/components/columnDesc.js","webpack://keypulse/./src/pages/genAi/styles/SampleDataTable.module.css?0e6b","pages/genAi/components/sampleData.js","webpack://keypulse/./src/pages/genAi/styles/Accordion.module.css?cf04","pages/genAi/components/accordian.js","webpack://keypulse/./src/pages/genAi/styles/FileUpload.module.css?e4c3","pages/genAi/components/browseFiles.js","pages/genAi/index.js","utils/const.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"accordionItem\":\"AnswersAccordion_accordionItem__CBrUz\",\"accordionHeader\":\"AnswersAccordion_accordionHeader__1xSNZ\",\"accordionContent\":\"AnswersAccordion_accordionContent__M3Vbe\"};","import React, { useEffect, useState } from 'react';\r\nimport styles from '../styles/AnswersAccordion.module.css';\r\nimport { CircularProgress, Button } from '@mui/material';\r\n\r\nconst AnswersAccordion = ({ question, answer, loading, type ,name='savedImages'}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const imageUrl = answer;\r\n  const [isSaved, setIsSaved] = useState(false); // To manage save status\r\n\r\n  useEffect(() => {\r\n    // Check if the image is already saved in localStorage\r\n    const savedImages = JSON.parse(localStorage.getItem(name) || '[]');\r\n    setIsSaved(savedImages.includes(imageUrl));\r\n  }, [imageUrl]);\r\n\r\n  const saveImage = () => {\r\n    let savedImages = JSON.parse(localStorage.getItem(name) || '[]');\r\n\r\n    // Add the new image URL if it doesn't already exist\r\n    if (!savedImages.includes(imageUrl)) {\r\n      savedImages.push(imageUrl);\r\n      localStorage.setItem(name, JSON.stringify(savedImages));\r\n      setIsSaved(true); // Mark the image as saved\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.accordionItem}>\r\n      <div className={styles.accordionHeader} onClick={() => setIsOpen(!isOpen)}>\r\n        <span>{question}</span>\r\n        <span>{isOpen ? '-' : '+'}</span>\r\n      </div>\r\n      {isOpen && (\r\n        <div className={styles.accordionContent}>\r\n          {loading ? (\r\n            <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\r\n              <CircularProgress size={24} />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {type === 'Text' ? (\r\n                <div>{answer}</div>\r\n              ) : (\r\n                <>\r\n                  <div style={{display:'flex',justifyContent:'space-between',alignItems:'start'}}>\r\n                    <img src={imageUrl} width={700} height={500} alt='' />\r\n                    {!isSaved && (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={saveImage}\r\n                        style={{ marginTop: '10px' }}\r\n                      >\r\n                        Save Image\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                  {isSaved && <div style={{ marginTop: '10px' }}>Image already to Dashboard</div>}\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswersAccordion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"questionBox\":\"SampleQuestion_questionBox__h4CCC\"};","import React from 'react';\r\nimport styles from '../styles/SampleQuestion.module.css';\r\n\r\nconst SampleQuestion = ({ question, onClick }) => {\r\n  return (\r\n    <button className={styles.questionBox} onClick={() => onClick(question)}>\r\n      {question}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SampleQuestion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"columnDescription_container__gm-Tt\",\"heading\":\"columnDescription_heading__xNdZv\",\"list\":\"columnDescription_list__erlbl\",\"listItem\":\"columnDescription_listItem__BCRcV\"};","import React from 'react';\r\nimport styles from '../styles/columnDescription.module.css';\r\n\r\nconst ColumnDescriptions = ({ descriptions }) => {\r\n  const descriptionItems = descriptions.split('\\n').filter(desc => desc.trim() !== '');\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* <h2 className={styles.heading}>Column Descriptions</h2> */}\r\n      <p className={styles.description}>The Topic below gives you a general fell of the dataset.</p>\r\n      <ul className={styles.list}>\r\n        {descriptionItems.map((item, index) => (\r\n          <li key={index} className={styles.listItem}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColumnDescriptions;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SampleDataTable_container__5JZRi\",\"heading\":\"SampleDataTable_heading__a3GiH\",\"table\":\"SampleDataTable_table__qBVKO\",\"headerCell\":\"SampleDataTable_headerCell__3aMgM\",\"row\":\"SampleDataTable_row__dlIY2\",\"cell\":\"SampleDataTable_cell__8pUW8\"};","import React from 'react';\r\nimport styles from '../styles/SampleDataTable.module.css';\r\n\r\nconst SampleDataTable = ({ data }) => {\r\n  // Assume `data` is an array of objects, so we need to map through it\r\n  const parsedData = Array.isArray(data) ? data : [data]; // Ensure data is an array\r\n\r\n  // Extract column headers from the keys of the first object in the array\r\n  const columns = parsedData.length > 0 ? Object.keys(parsedData[0]) : [];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* <h2 className={styles.heading}>Sample Data</h2> */}\r\n      <table className={styles.table}>\r\n        <thead>\r\n          <tr>\r\n            {columns.map((col) => (\r\n              <th key={col} className={styles.headerCell}>{col}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {parsedData.map((row, index) => (\r\n            <tr key={index} className={styles.row}>\r\n              {columns.map((col) => (\r\n                <td key={col} className={styles.cell}>{row[col]}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SampleDataTable;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"accordion\":\"Accordion_accordion__mGjo9\",\"header\":\"Accordion_header__HT9A4\",\"title\":\"Accordion_title__edOsX\",\"icon\":\"Accordion_icon__GQ5Ag\",\"content\":\"Accordion_content__aHdZd\"};","import React, { useState } from 'react';\r\nimport styles from '../styles/Accordion.module.css';\r\n\r\nconst Accordion = ({ title, children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleAccordion = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.accordion}>\r\n      <div className={styles.header} onClick={toggleAccordion}>\r\n        <h3 className={styles.title}>{title}</h3>\r\n        <span className={styles.icon}>{isOpen ? '▲' : '▼'}</span>\r\n      </div>\r\n      {isOpen && <div className={styles.content}>{children}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FileUpload_container__uXtON\",\"heading\":\"FileUpload_heading__I5pOI\",\"uploadSection\":\"FileUpload_uploadSection__8cvEI\",\"fileInput\":\"FileUpload_fileInput__WT7Ae\",\"uploadButton\":\"FileUpload_uploadButton__rvQyf\"};","import React from 'react';\r\nimport styles from '../styles/FileUpload.module.css';\r\n\r\nconst FileUpload = ({ handleFileChange, handleUpload }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.heading}>Upload Your Data</h2>\r\n      <div className={styles.uploadSection}>\r\n        <input type=\"file\" onChange={(e) => handleFileChange(e)} className={styles.fileInput} />\r\n        <button\r\n          type=\"submit\"\r\n          className={styles.uploadButton}\r\n          onClick={() => handleUpload()}\r\n        >\r\n          Start Chat\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n","// MiddleContent.js\r\n\r\nimport { CircularProgress, Grid } from \"@mui/material\"\r\nimport TextField from '@mui/material/TextField';\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport './Main.css'\r\nimport ColumnDescriptions from \"./components/columnDesc\";\r\nimport SampleDataTable from \"./components/sampleData\";\r\nimport Accordion from \"./components/accordian\";\r\nimport FileUpload from \"./components/browseFiles\";\r\nimport SampleQuestion from \"./components/questions\";\r\nimport AnswersAccordion from \"./components/answers\";\r\nimport { Tabs, Tab, InputAdornment } from '@mui/material';\r\nimport { IoMdRefresh, IoMdSend } from 'react-icons/io';\r\nimport { akkiourl } from \"../../utils/const\";\r\nconst GenAi = () => {\r\n\r\n    const [search, setSearch] = useState('')\r\n    const [question, setQuestion] = useState([])\r\n    const [fileName, setFileName] = useState('')\r\n    const [response, setResponse] = useState()\r\n    const handleSend = () => {\r\n        const updatedata = [...question, {\r\n            question: search,\r\n            answer: true,\r\n        }]\r\n        setQuestion(updatedata)\r\n        handleGetAnswer(updatedata)\r\n        setSearch('')\r\n    }\r\n\r\n\r\n    const [questions, setQuestions] = useState([\r\n        \"What is the minimum gross_income of the data?\",\r\n        \"What is the mean quantity of the data?\",\r\n        \"What is the 50th percentile of unit price of the data?\",\r\n        \"What is the 25th percentile of gross_income of the data?\",\r\n        \"What is the 25th percentile of tax_5_percentage of the data?\"\r\n    ]);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const [columnDescriptions, setColumnDesc] = useState(`a description of the columns in the provided data:\r\n  \r\n  1. Store ID: This column contains numerical values representing the unique identification number of the store where the sales data was recorded. Each row corresponds to a different store.\r\n  2. Employee Number: This column includes numerical values that represent the unique identification number of the employee associated with the sales data recorded in each row.\r\n  3. Date: This column likely includes date values indicating when the sales data was recorded.\r\n  4. Net Sales: This column contains numerical values representing the total sales amount after deducting any returns or discounts. It may include sales from both in-store and online transactions.\r\n  5. Taxes: This column likely includes numerical values representing the amount of taxes applied to the sales recorded in each row.\r\n  6. Taxable Sales: This column contains numerical values representing the portion of sales that are subject to taxation.\r\n  7. Home Sales: This column includes numerical values representing the sales amount specifically related to home products or categories.\r\n  8. Clothes Sales: This column contains numerical values representing the sales amount specifically related to clothing products or categories.\r\n  \r\n  These descriptions provide an overview of the data columns and the type of information they contain`);\r\n\r\n    const [sampleData, setSampleData] = useState(`{\"Store ID\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1},\"Employee Number\":{\"0\":54,\"1\":57,\"2\":50,\"3\":56,\"4\":50,\"5\":56,\"6\":52,\"7\":56,\"8\":55,\"9\":58},\"Area\":{\"0\":\"Asia\",\"1\":\"Asia\",\"2\":\"Asia\",\"3\":\"Asia\",\"4\":\"Asia\",\"5\":\"Asia\",\"6\":\"Asia\",\"7\":\"Asia\",\"8\":\"Asia\",\"9\":\"Asia\"},\"Date\":{\"0\":\"2018-01-31\",\"1\":\"2018-02-28\",\"2\":\"2018-03-31\",\"3\":\"2018-04-30\",\"4\":\"2018-05-31\",\"5\":\"2018-06-30\",\"6\":\"2018-07-31\",\"7\":\"2018-08-31\",\"8\":\"2018-09-30\",\"9\":\"2018-10-31\"},\"Sales\":{\"0\":86586.23,\"1\":131181.61,\"2\":185833.69,\"3\":150538.66,\"4\":183421.04,\"5\":292656.36,\"6\":214964.98,\"7\":189526.91,\"8\":222308.26,\"9\":213762.78},\"Marketing Spend\":{\"0\":16022.68,\"1\":6562.93,\"2\":1106.61,\"3\":16586.79,\"4\":2708.69,\"5\":10459.98,\"6\":26320.18,\"7\":26479.09,\"8\":4848.86,\"9\":13452.72},\"Electronics Sales\":{\"0\":23312.79,\"1\":38738.19,\"2\":53601.54,\"3\":42062.01,\"4\":42276.04,\"5\":69192.41,\"6\":48065.41,\"7\":47851.76,\"8\":64556.77,\"9\":43525.38},\"Home Sales\":{\"0\":10991.36,\"1\":17000.27,\"2\":26926.41,\"3\":25817.93,\"4\":26700.62,\"5\":45898.82,\"6\":24049.25,\"7\":27550.8,\"8\":38468.88,\"9\":21181.46},\"Clothes Sales\":{\"0\":28089.66,\"1\":52073.81,\"2\":58401.37,\"3\":50028.65,\"4\":63996.07,\"5\":95964.42,\"6\":94098.8,\"7\":74569.68,\"8\":71728.8,\"9\":78333.69}}`);\r\n\r\n    const [file, setFile] = useState(null)\r\n    const [startChart, setStartChart] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [currentTab, setCurrentTab] = useState(0);\r\n    const [imageSrc, setImageSrc] = useState(null)\r\n    const [allQuestions, setAllQuestions] = useState({\r\n        textQuestions: [],\r\n        graphQuestions: []\r\n    })\r\n    // const [img, setImage] = useState(null)\r\n    const handleFileChange = (event) => {\r\n        const selectedFile = event.target.files[0];\r\n        setFile(selectedFile);\r\n    };\r\n\r\n    const arrayToCSV = (data) => {\r\n        const csvRows = [];\r\n\r\n        // Get the headers (keys of the first object)\r\n        const headers = Object.keys(data[0]);\r\n        csvRows.push(headers.join(','));\r\n\r\n        // Loop through the data and convert each object to a CSV row\r\n        for (const row of data) {\r\n            const values = headers.map(header => row[header]);\r\n            csvRows.push(values.join(','));\r\n        }\r\n\r\n        return csvRows.join('\\n');\r\n    };\r\n\r\n    const handleUpload = async (data, fileC) => {\r\n        var formData = new FormData();\r\n\r\n        // Convert array to CSV blob if data exists\r\n        if (data) {\r\n            const csvData = arrayToCSV(data);  // Convert data to CSV\r\n            const file = new Blob([csvData], { type: 'text/csv' });  // Create CSV Blob\r\n            formData.append('file', file, 'data.csv');  // Append CSV file to formData\r\n        } else {\r\n            formData.append('file', fileC);  // Append CSV file to formData\r\n        }\r\n\r\n        setLoading(true);\r\n        setStartChart(true);\r\n\r\n        try {\r\n            await axios.post(`${akkiourl}/upload`, formData)\r\n                .then((response) => {\r\n                    setLoading(false);\r\n                    setResponse(response);\r\n                    console.log(response?.data)\r\n                    // Set response data for further processing\r\n                    setColumnDesc(response?.data?.column_description);\r\n                    setSampleData(response?.data?.first_10_rows);\r\n                    const textQuestions = response?.data?.text_questions?.split('\\n')?.filter(desc => desc.trim() !== '');\r\n                    const graphQuestions = response?.data?.plotting_questions?.split('\\n')?.filter(desc => desc.trim() !== '');\r\n                    setAllQuestions({\r\n                        textQuestions,\r\n                        graphQuestions\r\n                    });\r\n                    setQuestions(textQuestions);\r\n                });\r\n        } catch (err) {\r\n            setLoading(false);\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = (event) => {\r\n        if (file) {\r\n            console.log(file?.name?.replace(/\\.[^/.]+$/, ''))\r\n            setFileName(file?.name?.replace(/\\.[^/.]+$/, ''))\r\n            handleUpload(false, file)\r\n        }\r\n    };\r\n\r\n    const regenerateQuestions = () => {\r\n        if (currentTab == 0) {\r\n            regenerateTextQuestions()\r\n        } else {\r\n            regenerateGraphQuestions()\r\n        }\r\n    }\r\n    const regenerateTextQuestions = async () => {\r\n        try {\r\n            var formData = new FormData();\r\n            formData.append('tablename', fileName);\r\n            await axios.post(`${akkiourl}/regenerate_txt_questions`, formData)\r\n                .then((response) => {\r\n                    const questions = response?.data?.questions.split('\\n')\r\n                        .filter(desc => desc.trim() !== '')\r\n                        ;\r\n                    setAllQuestions({\r\n                        ...allQuestions,\r\n                        textQuestions: questions,\r\n                    })\r\n                    setQuestions(questions)\r\n                });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const regenerateGraphQuestions = async () => {\r\n        try {\r\n            var formData = new FormData();\r\n            formData.append('tablename', fileName);\r\n            await axios.post(`${akkiourl}/regenerate_graph_questions`, formData)\r\n                .then((response) => {\r\n                    const questions = response?.data?.questions.split('\\n')\r\n                        .filter(desc => desc.trim() !== '')\r\n                        .slice(1);;\r\n                    setAllQuestions({\r\n                        ...allQuestions,\r\n                        graphQuestions: questions\r\n                    })\r\n                    setQuestions(questions)\r\n                });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const handleGetAnswer = async (question, data) => {\r\n        var formData = new FormData();\r\n        formData.append('query', question);\r\n        formData.append('tablename', fileName);\r\n\r\n        try {\r\n            const res = await axios.post(\r\n                `${akkiourl}/${currentTab === 1 ? 'gen_graph_response' : 'gen_txt_response'}`,\r\n                formData,\r\n                { responseType: currentTab === 1 ? 'blob' : '' }\r\n            );\r\n            const imageUrl = currentTab === 1 ? URL.createObjectURL(res.data) : '';\r\n            const ans = data.map((item) => {\r\n                if (item.question == question) {\r\n                    return {\r\n                        ...item,\r\n                        view: currentTab === 1 ? \"Graph\" : \"Text\",\r\n                        answer: currentTab === 1 ? imageUrl : res?.data?.answer,\r\n                        loading: false\r\n                    }\r\n                } else return item;\r\n            })\r\n            setAnswers(ans)\r\n        } catch (err) {\r\n            const ans = data.map((item) => {\r\n                if (item.question == question) {\r\n                    return {\r\n                        ...item,\r\n                        answer: \"No Data found\",\r\n                        loading: false\r\n                    }\r\n                } else return item;\r\n            })\r\n            setAnswers(ans)\r\n        }\r\n    }\r\n\r\n    // const columnDescriptions = response?.data?.col_desc;\r\n    // const sampleData = response?.data[\"sample data\"]\r\n\r\n    const handleQuestionClick = async (question) => {\r\n        const data = [...answers, { question, answer: \"\", loading: true }]\r\n        setAnswers(data);\r\n        handleGetAnswer(question, data)\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setQuestions(newValue == 0 ? allQuestions?.textQuestions : allQuestions?.graphQuestions)\r\n        setCurrentTab(newValue);\r\n    };\r\n\r\n    return (\r\n        <Grid display={\"flex\"}>\r\n            <Grid item md={10} padding={\"10px\"} sx={{\r\n                width: \"100%\"\r\n            }}>\r\n                <Grid sx={{\r\n                    background: '#FFF',\r\n                    width: \"100%\"\r\n                }}>\r\n                    {imageSrc && <img src={imageSrc} alt=\"Generated Image\" style={{ width: '100%', height: 'auto' }} />}\r\n\r\n                    <Grid sx={{\r\n                        padding: '20px 10px 10px 10px',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        gap: '30px',\r\n                        // height: 'calc(100vh - 150px)',\r\n                        overflow: 'auto',\r\n                        width: \"100%\"\r\n                    }}>\r\n                        <div>\r\n                            <FileUpload handleFileChange={handleFileChange} handleUpload={handleFileUpload} />\r\n                            {/* {!startChart && <p style={{ fontSize: '14px', fontStyle: 'italic', margin: '0px' }}>To get insights from your own data, please upload your csv file.</p>\r\n                            } */}\r\n                        </div>\r\n                        {startChart && <div>\r\n                            {!loading ? <div>\r\n                                <h2 style={{ fontSize: '30px' }}>Data Explanation</h2>\r\n                                <p>The topic below gives the general feel of the dataset,click on expander ro see more.</p>\r\n\r\n                                <Accordion title=\"See Data Explanation\">\r\n                                    <ColumnDescriptions descriptions={columnDescriptions} />\r\n                                </Accordion>\r\n                                <Accordion title=\"See Raw Data\">\r\n                                    <SampleDataTable data={sampleData} />\r\n                                </Accordion>\r\n                                <Tabs\r\n                                    value={currentTab}\r\n                                    onChange={handleTabChange}\r\n                                    sx={{\r\n                                        marginTop: '20px',\r\n                                        marginBottom: '20px',\r\n                                        '& .MuiTabs-flexContainer': {\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                        },\r\n                                        '& .MuiTab-root': {\r\n                                            textTransform: 'none',\r\n                                            fontSize: '16px',\r\n                                            fontWeight: '400',\r\n                                            lineHeight: '24px',\r\n                                            fontFamily: 'Poppins',\r\n                                            // borderRadius: '24px',\r\n                                            background: '#E6EDF5',\r\n                                            color: '#242424',\r\n                                            margin: '4px',\r\n                                            padding: '4px 10px',\r\n                                            ':hover': {\r\n                                                background: '#E6EDF5'\r\n                                            }\r\n                                        },\r\n                                        '& .Mui-selected': {\r\n                                            backgroundColor: '#3F8CFF !important',\r\n                                            color: '#fff !important',\r\n                                            fontWeight: 700,\r\n                                        },\r\n                                        svg: {\r\n                                            width: 16,\r\n                                            height: 16,\r\n                                        },\r\n                                    }}\r\n                                >\r\n                                    <Tab label=\"Text View\" />\r\n                                    <Tab label=\"Graphical View\" />\r\n                                </Tabs>\r\n                                <div className=\"explorationSection\">\r\n                                    <h2 style={{ fontSize: '30px' }}>Exploration</h2>\r\n                                    <p>Below are the sample questions</p>\r\n                                    <div className=\"sampleQuestions\" style={{ display: 'flex', marginBottom: '20px', flexWrap: 'wrap' }}>\r\n                                        {questions?.map((question, index) => (\r\n                                            <SampleQuestion key={index} question={`${question}`} onClick={handleQuestionClick} />\r\n                                        ))}\r\n                                    </div>\r\n                                    <button\r\n                                        style={{\r\n                                            background: '#f8f9fa',\r\n                                            padding: '8px 12px',\r\n                                            border: 'none',\r\n                                            borderRadius: '5px',\r\n                                            cursor: 'pointer',\r\n                                            fontSize: '16px',\r\n                                            // fontWeight: 'bold',\r\n                                            transition: 'background 0.3s ease',\r\n                                            marginBottom: '20px',\r\n                                            color: 'black'\r\n                                        }}\r\n                                        onClick={regenerateQuestions}\r\n                                    >\r\n                                        <IoMdRefresh color=\"blue\" />  Re-generate sample questions\r\n                                    </button>\r\n                                    <p>Type In your question below:</p>\r\n                                    <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '0px' }}>\r\n                                        <TextField\r\n                                            onChange={(e) => setSearch(e.target.value)}\r\n                                            variant=\"outlined\"\r\n                                            value={search}\r\n                                            sx={{\r\n                                                width: '500px',\r\n                                                '& .MuiOutlinedInput-root:hover fieldset': {\r\n                                                    borderColor: 'rgb(69, 69, 69)',\r\n                                                },\r\n                                                '& .MuiOutlinedInput-root.Mui-focused fieldset': {\r\n                                                    outline: 'none',\r\n                                                    boxShadow: 'none',\r\n                                                    border: search ? '1px solid rgb(48, 36, 139)' : '1px solid rgb(69, 69, 69)',\r\n                                                },\r\n                                                '& .MuiOutlinedInput-root': {\r\n                                                    paddingRight: '10px',\r\n                                                    height: \"45px\"\r\n                                                },\r\n                                            }}\r\n                                            placeholder=\"Type here to ask Gen AI.............\"\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IoMdSend size={24} style={{ color: search ? \"rgb(91, 71, 245)\" : 'rgb(142, 139, 157)', cursor: 'pointer' }} onClick={() => { handleQuestionClick(search); setSearch(\"\") }} />\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"answersSection\" style={{ marginTop: \"20px\" }}>\r\n                                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n                                            <h2 style={{ fontSize: '30px' }}>Answers</h2>\r\n                                            <button className=\"btn btn-primary\" onClick={() => setAnswers([])}>Reset</button>\r\n                                        </div>\r\n                                        {answers?.map((item, index) => (\r\n                                            <AnswersAccordion key={index} question={item.question} answer={item.answer} loading={item?.loading} type={item.view} />\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div> : <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\r\n                                <CircularProgress />\r\n                            </div>}\r\n                        </div>}\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Grid >\r\n    )\r\n}\r\n\r\nexport default GenAi;\r\n","export const akkiourl=\"http://18.142.251.129:3001/api\"\r\nexport const keypulseurl=\"http://18.143.174.1:8000/api\"\r\n\r\nexport function getFinalData(uniqueArr, isDate, length) {\r\n  // Convert values to valid Date objects or numbers\r\n  const parsedArr = uniqueArr?.map(val => {\r\n    if (isDate) {\r\n      const date = new Date(val);\r\n      return isNaN(date.getTime()) ? null : date; // Return null for invalid dates\r\n    }\r\n    return !isNaN(val) ? Number(val) : null; // Convert valid numbers\r\n  }).filter(val => val !== null); // Filter out invalid values\r\n\r\n  // Sort the array\r\n  const sortedArr = parsedArr?.sort((a, b) => a - b); // Sorting works for both dates and numbers in JavaScript\r\n\r\n  // Make chunk size dynamic based on the 'length' argument\r\n  const chunkSize = Math.floor(sortedArr?.length / length); // Base size for each chunk\r\n  const remainder = sortedArr?.length % length; // Handle remainder that cannot be evenly divided into 'length'\r\n\r\n  const finalData = [];\r\n  let index = 0;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    // Each chunk takes an extra item if there are remaining items from the division\r\n    const currentChunkSize = i < remainder ? chunkSize + 1 : chunkSize;\r\n\r\n    // Get the current chunk\r\n    const chunk = sortedArr?.slice(index, index + currentChunkSize);\r\n\r\n    if (chunk?.length > 0) {\r\n      const minValue = chunk[0]; // First value (min) in sorted chunk\r\n      const nextChunk = sortedArr?.slice(index + currentChunkSize); // Look ahead to the next chunk\r\n      const nextMinValue = nextChunk?.length > 0 ? nextChunk[0] : chunk[chunk?.length - 1]; // Avoid duplicates by always taking the next distinct value\r\n\r\n      // Format dates properly if isDate is true\r\n      const formatDate = date => {\r\n        if (isDate) {\r\n          const d = new Date(date);\r\n          return d.toLocaleDateString('en-US'); // Use 'en-US' or any preferred locale\r\n        }\r\n        return date; // For numbers, return as is\r\n      };\r\n\r\n      // Ensure there's no duplicate label by checking if the nextMinValue is greater than the current minValue\r\n      const countInRange = sortedArr?.filter(val => val >= minValue && val < nextMinValue).length;\r\n\r\n      finalData.push({\r\n        value: isDate ? `${formatDate(minValue)}` : `${minValue}`, // Use formatted date or number\r\n        count: countInRange // Count of items between minValue and nextMinValue\r\n      });\r\n    }\r\n\r\n    index += currentChunkSize; // Move the index forward\r\n  }\r\n\r\n  return finalData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  "],"names":["_ref","question","answer","loading","type","_ref$name","name","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","imageUrl","_useState3","_useState4","isSaved","setIsSaved","useEffect","savedImages","JSON","parse","localStorage","getItem","includes","_jsxs","className","styles","children","onClick","_jsx","style","display","width","justifyContent","CircularProgress","size","_Fragment","alignItems","src","height","alt","Button","variant","color","push","setItem","stringify","marginTop","descriptionItems","descriptions","split","filter","desc","trim","container","description","list","map","item","index","listItem","data","parsedData","Array","isArray","columns","length","Object","keys","col","row","title","handleFileChange","handleUpload","onChange","e","search","setSearch","_useState5","_useState6","fileName","setFileName","_useState7","_useState8","setResponse","_useState9","_useState10","questions","setQuestions","_useState11","_useState12","answers","setAnswers","_useState13","_useState14","columnDescriptions","setColumnDesc","_useState15","_useState16","sampleData","setSampleData","_useState17","_useState18","file","setFile","_useState19","_useState20","startChart","setStartChart","_useState21","_useState22","setLoading","_useState23","_useState24","currentTab","setCurrentTab","_useState25","_useState26","imageSrc","_useState27","textQuestions","graphQuestions","_useState28","allQuestions","setAllQuestions","arrayToCSV","csvRows","headers","join","_step","_iterator","_createForOfIteratorHelper","_loop","value","values","header","s","n","done","err","f","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileC","formData","csvData","_file","wrap","_context","prev","next","FormData","Blob","append","axios","post","concat","akkiourl","then","response","_response$data","_response$data2","_response$data3","_response$data3$text_","_response$data3$text_2","_response$data4","_response$data4$plott","_response$data4$plott2","console","log","column_description","first_10_rows","text_questions","plotting_questions","t0","stop","_x","_x2","apply","arguments","regenerateTextQuestions","_ref2","_callee2","_context2","_response$data5","_objectSpread","regenerateGraphQuestions","_ref3","_callee3","_context3","_response$data6","slice","handleGetAnswer","_ref4","_callee4","res","ans","_ans","_context4","responseType","sent","URL","createObjectURL","_res$data","view","_x3","_x4","handleQuestionClick","_ref5","_callee5","_context5","_toConsumableArray","_x5","Grid","md","padding","sx","background","flexDirection","gap","overflow","FileUpload","event","selectedFile","target","files","_file$name","_file$name2","replace","fontSize","Accordion","ColumnDescriptions","SampleDataTable","Tabs","newValue","marginBottom","textTransform","fontWeight","lineHeight","fontFamily","margin","backgroundColor","svg","Tab","label","flexWrap","SampleQuestion","border","borderRadius","cursor","transition","IoMdRefresh","TextField","borderColor","outline","boxShadow","paddingRight","placeholder","InputProps","endAdornment","InputAdornment","position","IoMdSend","AnswersAccordion","getFinalData","uniqueArr","isDate","parsedArr","val","date","Date","isNaN","getTime","Number","sortedArr","sort","a","b","chunkSize","Math","floor","remainder","finalData","currentChunkSize","i","chunk","minValue","nextChunk","nextMinValue","countInRange","toLocaleDateString","count"],"sourceRoot":""}