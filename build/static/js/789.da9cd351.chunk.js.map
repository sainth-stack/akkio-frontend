{"version":3,"file":"static/js/789.da9cd351.chunk.js","mappings":"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","sources":["pages/BusinessIntelligence/components/components/BarGraph.jsx","pages/BusinessIntelligence/components/components/EndPopup.jsx","pages/BusinessIntelligence/components/components/popups/pivotVIew.jsx","pages/BusinessIntelligence/components/components/popups/chatdataprep.js","pages/BusinessIntelligence/components/components/popups/cleandata.js","pages/BusinessIntelligence/components/components/DisplayData.jsx","pages/BusinessIntelligence/components/components/Navbar.jsx","webpack://keypulse/./src/pages/genAi/styles/AnswersAccordion.module.css?abce","pages/genAi/components/answers.js","webpack://keypulse/./src/pages/genAi/styles/SampleQuestion.module.css?4da4","pages/genAi/components/questions.js","utils/const.js"],"sourcesContent":["import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst BarChartComponent = ({ data, header, height = 180, width = 220 }) => {\r\n  // Calculate the tick values for the first, middle, and last data points\r\n  const ticks = data.length > 1 ? [\r\n    data[0]?.value, // First value\r\n    data[Math.floor(data.length / 2)]?.value, // Middle value\r\n    data[data.length - 1]?.value // Last value\r\n  ] : [data[0]?.value];\r\n\r\n  // Custom tick formatter to display only the desired ticks\r\n  const tickFormatter = (value) => {\r\n    return ticks.includes(value) ? value : '';\r\n  };\r\n\r\n  return (\r\n    <BarChart style={{ margin: \"auto\" }} cursor={'pointer'} width={width} height={height} data={data}>\r\n      <XAxis\r\n        dataKey='value'\r\n        tickFormatter={tickFormatter}\r\n        tick={{ fontSize: 12 }}\r\n        tickLine={false} // Hide the tick lines if needed\r\n      />\r\n      <Tooltip />\r\n      <Bar\r\n        cursor={'pointer'}\r\n        dataKey=\"count\"\r\n        fill='rgba(0, 163, 255, 1)' // RGBA color with full opacity (alpha = 1)\r\n        barSize={20}\r\n        cornerRadius={{ top: 5 }} // Apply top border radius\r\n      />\r\n    </BarChart>\r\n  );\r\n};\r\n\r\nexport default BarChartComponent;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDataAPI } from '../contexts/GetDataApi'\r\nimport BarGraph from './BarGraph'\r\nimport { AiOutlineClose } from \"react-icons/ai\"\r\nimport { Progress } from 'antd'\r\nimport { getFinalData } from '../../../../utils/const'\r\nconst EndPopup = ({ setDisplaypopup, popup }) => {\r\n  const {\r\n    displayPopup\r\n  } = useDataAPI()\r\n  const [state, setState] = useState({})\r\n  console.log(state)\r\n  useEffect(() => {\r\n    setState({\r\n      ...displayPopup,\r\n\r\n    })\r\n  }, [displayPopup, popup])\r\n\r\n\r\n  const calculateCorrelationCoefficient = (data, header1, header2) => {\r\n    console.log(data);\r\n  \r\n    // Initialize arrays for values\r\n    let arrf1 = [];\r\n    let arrf2 = [];\r\n  \r\n    // Extract values for header1 and header2, ensuring they are numbers\r\n    data.forEach(obj => {\r\n      if (obj[header1] && obj[header2]) {\r\n        const val1 = parseFloat(obj[header1]);\r\n        const val2 = parseFloat(obj[header2]);\r\n  \r\n        if (!isNaN(val1) && !isNaN(val2)) {\r\n          arrf1.push(val1);\r\n          arrf2.push(val2);\r\n        }\r\n      }\r\n    });\r\n  \r\n    // Ensure arrays have valid values before calculating correlation\r\n    if (arrf1.length === 0 || arrf2.length === 0) {\r\n      console.error('No valid data to calculate correlation.');\r\n      return 0; // Return 0 if no valid data found\r\n    }\r\n  \r\n    // Call the function to calculate Pearson correlation\r\n    const correper = Math.abs(calculatePearsonCorrelation(arrf1, arrf2)); // Absolute value for positive correlation\r\n    console.log(correper);\r\n  \r\n    // Return the correlation percentage\r\n    return (correper * 100).toFixed(2);\r\n  };\r\n  \r\n  const calculatePearsonCorrelation = (arr1, arr2) => {\r\n    const n = arr1.length;\r\n    const sum1 = arr1.reduce((a, b) => a + b, 0);\r\n    const sum2 = arr2.reduce((a, b) => a + b, 0);\r\n    const sum1Sq = arr1.reduce((a, b) => a + b * b, 0);\r\n    const sum2Sq = arr2.reduce((a, b) => a + b * b, 0);\r\n    const pSum = arr1.map((_, i) => arr1[i] * arr2[i]).reduce((a, b) => a + b, 0);\r\n    const num = pSum - (sum1 * sum2 / n);\r\n    const den = Math.sqrt((sum1Sq - sum1 * sum1 / n) * (sum2Sq - sum2 * sum2 / n));\r\n  \r\n    return den === 0 ? 0 : num / den;\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  const headers = Object.keys(state.totData?.length > 0 ? state?.totData[0] : []);\r\n\r\n  function removeDuplicates(arr) {\r\n    return [...new Set(arr)];\r\n  }\r\n  const finalHeaders = headers.map((header) => {\r\n    const updatedArray = state.totData.map((value) => {\r\n      const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n      if (!isNaN(value[header])) {\r\n        return parseInt(value[header])\r\n      }\r\n      else if (!isNaN(Date.parse(value[header]))) {\r\n        const date = new Date(value[header])\r\n        return date;\r\n      }\r\n      else if (timePattern.test(value[header])) {\r\n        return parseInt(value[header].slice(0, 3))\r\n      }\r\n      else {\r\n        return value[header]\r\n      }\r\n    })\r\n    let uniqueArrf = removeDuplicates(updatedArray)\r\n    let uniqueArr = uniqueArrf.filter((item) => item !== undefined)\r\n    return {\r\n      correlation: uniqueArr.length < 10 && uniqueArr.length > 1,\r\n      name: header,\r\n      integer: uniqueArr.length < 10 && !isNaN(state.totData[0][header])\r\n    }\r\n  })\r\n  let headerData = finalHeaders.filter((item) => item.name === state.title)\r\n  let corHeadrs = []\r\n  if (headerData[0]?.correlation) {\r\n    finalHeaders.map((item) => {\r\n      if (item.correlation) {\r\n        corHeadrs.push(item.name)\r\n      }\r\n    })\r\n  } else {\r\n    finalHeaders.map((item) => {\r\n      if (item.integer) {\r\n        corHeadrs.push(item.name)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  const finalData=getFinalData(state.updatedArray,state.isDate,12)\r\n  return (\r\n    <>\r\n      <div className={popup ? 'popup-container open-popup' : 'popup-container close-popup'} >\r\n        <div className=\"title\">\r\n          {state.title}\r\n          <AiOutlineClose cursor={\"pointer\"} className='close-btn' size={25} onClick={() => {\r\n            setDisplaypopup(false)\r\n          }} />\r\n        </div>\r\n        <div className='new-fin'>\r\n          <div className=\"data\">\r\n            <div className=\"rows\">\r\n              <span style={{ fontSize: '15px' }}>Rows</span> <span style={{ fontSize: '20px' }}>{state.rows}</span>\r\n            </div>\r\n            <div className=\"rows\">\r\n              <span style={{ fontSize: '15px' }}>Empty Rows</span> <span style={{ fontSize: '20px' }}>{state.updatedData?.find(obj => isNaN(obj.value))?.count || 0}</span>\r\n            </div>\r\n            <div className=\"unique-values\">\r\n              <span style={{ fontSize: '15px', marginLeft: '5px' }}>Unique Values</span> <span style={{ fontSize: '20px', marginLeft: '5px' }}>{state.uniqueValues}</span>\r\n            </div>\r\n          </div>\r\n          <div style={{ padding: '10px 0px', borderBottom: '1px solid black', marginBottom: '10px' }}>\r\n            <span style={{ padding: '0px 20px', fontSize: '18px', fontWeight: 500 }}>Distributions</span>\r\n            {\r\n              state.progress ? state.updatedData.map((value, index) => {\r\n                let name = (typeof state.uniqueArr[index] === 'number' && isNaN(state.uniqueArr[index])) ? 'blank' : state.uniqueArr[index];\r\n                return (\r\n                  <>\r\n                    <div className=\"progress-container\" style={{ padding: '0px 20px' }} key={index}>\r\n                      <div style={{ width: '100%', display: 'flex', justifyContent: 'space-between', alignItems: 'start', height: '20px' }}>\r\n                        <p title={name} style={{ width: '130px', overflow: 'hidden', whiteSpace: 'nowrap', display: 'flex', justifyContent: 'start' }}>\r\n                          <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n                            {name}\r\n                          </span>\r\n                        </p>\r\n                        <p>{value}%</p>\r\n                      </div>\r\n                      <Progress style={{ width: \"100%\" }} strokeColor={'#00a3f'} size=\"small\" showInfo={false} percent={value} status=\"active\" />\r\n                    </div>\r\n                  </>\r\n                );\r\n              }) :\r\n                <div style={{width:'100%'}}>\r\n                  <BarGraph data={finalData} cursor={'pointer'} header={state.title} width={320} height={220}/>\r\n                </div>\r\n            }\r\n          </div>\r\n          <div style={{ marginBottom: '30px' }}>\r\n            <span style={{ padding: '0px 20px', fontSize: '18px', fontWeight: 500 }}>Correlations</span>\r\n            {\r\n              headers.map((header2, index2) => {\r\n                if (state.title !== header2) {\r\n                  let correlation;\r\n                  correlation = calculateCorrelationCoefficient(state.totData?.length > 0 ? state.totData : [], state.title, header2);\r\n                  return (\r\n                    <div className=\"progress-container\" style={{ padding: '0px 20px', marginTop: '2px' }} key={`${state.title}-${header2}`}>\r\n                      <div style={{ width: '96%', display: 'flex', justifyContent: 'space-between', alignItems: 'start', height: '20px' }}>\r\n                        <p title={`${state.title} vs ${header2}`} style={{}}>\r\n                          <span style={{}}>\r\n                            {`${header2}`}\r\n                          </span>\r\n                        </p>\r\n                        <p>{correlation || 0 }%</p>\r\n                      </div>\r\n                      <Progress style={{ width: \"100%\", marginBottom: '2px' }} size={[300, 4]} strokeColor={'hsl(231.8, 35.7%, 72%)'} showInfo={false} percent={correlation} status=\"active\" />\r\n                    </div>\r\n                  );\r\n                }\r\n                return null;\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EndPopup","export const PivotView = ({ headers, data, removeDuplicates }) => {\r\n    const pivotHeaders = ['Column Number', 'Column Name', 'Data Type', 'Empty Rows', 'Unique Values']\r\n    const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n\r\n    const getDataType = (header, type) => {\r\n        const updatedArray = data.map((value) => {\r\n            const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n            if (!isNaN(value[header])) {\r\n                return parseInt(value[header])\r\n            }\r\n            else if (!isNaN(Date.parse(value[header]))) {\r\n                const date = new Date(value[header])\r\n                return date.getDate()\r\n            }\r\n            else if (timePattern.test(value[header])) {\r\n                return parseInt(value[header].slice(0, 3))\r\n            }\r\n            else {\r\n                return value[header]\r\n            }\r\n        })\r\n        let uniqueArr = removeDuplicates(updatedArray)\r\n        if (type == 'dp') {\r\n            if (!isNaN(data[0][header])) {\r\n                return 'Number'\r\n            }\r\n            else if (!isNaN(Date.parse(data[0][header]))) {\r\n                return 'Date'\r\n            }\r\n            else if (timePattern.test(data[0][header])) {\r\n                return 'Time'\r\n            }\r\n            else if (uniqueArr.length < 10 && isNaN(data[0][header])) {\r\n                return 'Category'\r\n            }\r\n            else if (isNaN(data[0][header])) {\r\n                return 'Text'\r\n            }\r\n        }\r\n        if (type == 'er') {\r\n            return uniqueArr.filter(element => element === undefined || element ==='')?.length || 0;\r\n        }\r\n        if(type=='uv'){\r\n            return uniqueArr.length\r\n        }\r\n    }\r\n    const finData = Object.keys(data[0]).map((item, index) => {\r\n        return {\r\n            'Column Number': index + 1,\r\n            'Column Name': item,\r\n            'Data Type': getDataType(item, 'dp'),\r\n            'Empty Rows': getDataType(item, 'er'),\r\n            'Unique Values':getDataType(item,'uv')\r\n        }\r\n    })\r\n    console.log(finData)\r\n    return (\r\n        <div>\r\n            <table style={{ border: 'none' }}>\r\n                <thead>\r\n                    <tr style={{ zIndex: 9999999 }}>\r\n                        {\r\n                            pivotHeaders.map((header, index) => {\r\n                                return <th key={index}>{header}</th>\r\n                            })\r\n                        }\r\n                    </tr>\r\n\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {finData.map((row, index) => {\r\n                        return <tr\r\n                            key={index}\r\n                        >\r\n                            {\r\n                                pivotHeaders.map((head, index) => {\r\n                                    return <td key={index} >{row[head]}</td>\r\n                                })\r\n                            }\r\n\r\n                            {/* Add more data columns as needed */}\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","// MiddleContent.js\r\n\r\nimport { CircularProgress, Grid } from \"@mui/material\"\r\nimport TextField from '@mui/material/TextField';\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport '../../../../genAi/Main.css'\r\nimport SampleQuestion from \"../../../../genAi/components/questions\";\r\nimport AnswersAccordion from \"../../../../genAi/components/answers\";\r\nimport { Tabs, Tab, InputAdornment } from '@mui/material';\r\nimport { IoMdRefresh, IoMdSend } from 'react-icons/io';\r\nimport { Modal } from \"antd\";\r\nimport { akkiourl } from \"../../../../../utils/const\";\r\nconst ChatDataPrep = ({ showModel, setShowModel }) => {\r\n    const fileName = localStorage.getItem('filename')?.replace(/\\.[^/.]+$/, '');\r\n    const [search, setSearch] = useState('')\r\n    const [response, setResponse] = useState()\r\n    const [questions, setQuestions] = useState([]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [startChart, setStartChart] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [currentTab, setCurrentTab] = useState(0);\r\n    const [allQuestions, setAllQuestions] = useState({\r\n        textQuestions: [],\r\n        graphQuestions: []\r\n    })\r\n\r\n\r\n    const arrayToCSV = (data) => {\r\n        const csvRows = [];\r\n\r\n        // Get the headers (keys of the first object)\r\n        const headers = Object.keys(data[0]);\r\n        csvRows.push(headers.join(','));\r\n\r\n        // Loop through the data and convert each object to a CSV row\r\n        for (const row of data) {\r\n            const values = headers.map(header => row[header]);\r\n            csvRows.push(values.join(','));\r\n        }\r\n\r\n        return csvRows.join('\\n');\r\n    };\r\n\r\n    const handleUpload = async (data, fileC) => {\r\n        var formData = new FormData();\r\n        setLoading(true);\r\n        setStartChart(true);\r\n        console.log(data)\r\n        // Convert array to CSV blob if data exists\r\n        if (data) {\r\n            const csvData = arrayToCSV(data);  // Convert data to CSV\r\n            const file = new Blob([csvData], { type: 'text/csv' });  // Create CSV Blob\r\n            formData.append('file', file, 'data.csv');  // Append CSV file to formData\r\n        } else {\r\n            formData.append('file', fileC);  // Append CSV file to formData\r\n        }\r\n\r\n        try {\r\n            await axios.post(`${akkiourl}/upload`, formData)\r\n                .then((response) => {\r\n                    setLoading(false);\r\n                    setResponse(response);\r\n                    const textQuestions = response?.data?.text_questions\r\n                        .split('\\n')\r\n                        .filter(desc => desc.trim() !== '');\r\n\r\n                    const graphQuestions = response?.data?.plotting_questions\r\n                        .split('\\n')\r\n                        .filter(desc => desc.trim() !== '');\r\n\r\n                    setAllQuestions({\r\n                        textQuestions,\r\n                        graphQuestions\r\n                    });\r\n                    setQuestions(textQuestions);\r\n                });\r\n        } catch (err) {\r\n            setLoading(false);\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Check for data in localStorage\r\n        const storedData = localStorage.getItem('prepData');\r\n\r\n        if (storedData && showModel) {\r\n            // Parse the stored data and send it to the API\r\n            const parsedData = JSON.parse(storedData);\r\n            handleUpload(parsedData);\r\n        }\r\n    }, [showModel]);\r\n\r\n    const regenerateQuestions = () => {\r\n        if (currentTab == 0) {\r\n            regenerateTextQuestions()\r\n        } else {\r\n            regenerateGraphQuestions()\r\n        }\r\n    }\r\n    const regenerateTextQuestions = async () => {\r\n        try {\r\n            var formData = new FormData();\r\n            formData.append('tablename', fileName);\r\n            await axios.post(`${akkiourl}/regenerate`, formData)\r\n                .then((response) => {\r\n                    const questions = response?.data?.questions.split('\\n')\r\n                        .filter(desc => desc.trim() !== '')\r\n                        ;\r\n                    setAllQuestions({\r\n                        ...allQuestions,\r\n                        textQuestions: questions,\r\n                    })\r\n                    setQuestions(questions)\r\n                });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const regenerateGraphQuestions = async () => {\r\n        try {\r\n            var formData = new FormData();\r\n            formData.append('tablename', fileName);\r\n            await axios.post(`${akkiourl}/regenerate_chart`, formData)\r\n                .then((response) => {\r\n                    const questions = response?.data?.questions.split('\\n')\r\n                        .filter(desc => desc.trim() !== '')\r\n                        .slice(1);;\r\n                    setAllQuestions({\r\n                        ...allQuestions,\r\n                        graphQuestions: questions\r\n                    })\r\n                    setQuestions(questions)\r\n                });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const handleGetAnswer = async (question, data) => {\r\n        var formData = new FormData();\r\n        formData.append('query', question);\r\n        formData.append('tablename', fileName);\r\n\r\n        try {\r\n            const res = await axios.post(\r\n                `${akkiourl}/${currentTab === 1 ? 'getResult2' : 'genresponse2'}`,\r\n                formData,\r\n                { responseType: currentTab === 1 ? 'blob' : '' }\r\n            );\r\n            const imageUrl = currentTab === 1 ? URL.createObjectURL(res.data) : '';\r\n            const ans = data.map((item) => {\r\n                if (item.question == question) {\r\n                    return {\r\n                        ...item,\r\n                        view: currentTab === 1 ? \"Graph\" : \"Text\",\r\n                        answer: currentTab === 1 ? imageUrl : res?.data?.answer,\r\n                        loading: false\r\n                    }\r\n                } else return item;\r\n            })\r\n            setAnswers(ans)\r\n        } catch (err) {\r\n            const ans = data.map((item) => {\r\n                if (item.question == question) {\r\n                    return {\r\n                        ...item,\r\n                        answer: \"No Data found\",\r\n                        loading: false\r\n                    }\r\n                } else return item;\r\n            })\r\n            setAnswers(ans)\r\n        }\r\n    }\r\n\r\n    const handleQuestionClick = async (question) => {\r\n        const data = [...answers, { question, answer: \"\", loading: true }]\r\n        setAnswers(data);\r\n        handleGetAnswer(question, data)\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setQuestions(newValue == 0 ? allQuestions?.textQuestions : allQuestions?.graphQuestions)\r\n        setCurrentTab(newValue);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"\"\r\n            open={showModel}\r\n            style={{ top: '0%', zIndex: 99999, width: '80vh', height: '100vh', overflow: 'auto' }}\r\n            onCancel={() => setShowModel(false)}\r\n            width={'110vh'}\r\n            footer={null}\r\n        >\r\n            <Grid item md={10} padding={\"10px\"} sx={{\r\n                width: \"100%\"\r\n            }}>\r\n                <Grid sx={{\r\n                    background: '#FFF',\r\n                    width: \"100%\"\r\n                }}>\r\n                    <Grid sx={{\r\n                        padding: '20px 10px 10px 10px',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        gap: '30px',\r\n                        overflow: 'auto',\r\n                        width: \"100%\"\r\n                    }}>\r\n                        {startChart && <div>\r\n                            {!loading ? <div>\r\n                                <h2 style={{ fontSize: '30px' }}>Data Exploration</h2>\r\n                                <Tabs\r\n                                    value={currentTab}\r\n                                    onChange={handleTabChange}\r\n                                    sx={{\r\n                                        marginTop: '20px',\r\n                                        marginBottom: '20px',\r\n                                        '& .MuiTabs-flexContainer': {\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                        },\r\n                                        '& .MuiTab-root': {\r\n                                            textTransform: 'none',\r\n                                            fontSize: '16px',\r\n                                            fontWeight: '400',\r\n                                            lineHeight: '24px',\r\n                                            fontFamily: 'Poppins',\r\n                                            // borderRadius: '24px',\r\n                                            background: '#E6EDF5',\r\n                                            color: '#242424',\r\n                                            margin: '4px',\r\n                                            padding: '4px 10px',\r\n                                            ':hover': {\r\n                                                background: '#E6EDF5'\r\n                                            }\r\n                                        },\r\n                                        '& .Mui-selected': {\r\n                                            backgroundColor: '#3F8CFF !important',\r\n                                            color: '#fff !important',\r\n                                            fontWeight: 700,\r\n                                        },\r\n                                        svg: {\r\n                                            width: 16,\r\n                                            height: 16,\r\n                                        },\r\n                                    }}\r\n                                >\r\n                                    <Tab label=\"Text View\" />\r\n                                    <Tab label=\"Graphical View\" />\r\n                                </Tabs>\r\n                                <div className=\"explorationSection\">\r\n                                    <h2 style={{ fontSize: '30px' }}>Exploration</h2>\r\n                                    <p>Below are the sample questions</p>\r\n                                    <div className=\"sampleQuestions\" style={{ display: 'flex', marginBottom: '20px', flexWrap: 'wrap' }}>\r\n                                        {questions?.map((question, index) => (\r\n                                            <SampleQuestion key={index} question={`${question}`} onClick={handleQuestionClick} />\r\n                                        ))}\r\n                                    </div>\r\n                                    <button\r\n                                        style={{\r\n                                            background: '#f8f9fa',\r\n                                            padding: '8px 12px',\r\n                                            border: 'none',\r\n                                            borderRadius: '5px',\r\n                                            cursor: 'pointer',\r\n                                            fontSize: '16px',\r\n                                            // fontWeight: 'bold',\r\n                                            transition: 'background 0.3s ease',\r\n                                            marginBottom: '20px',\r\n                                            color: 'black'\r\n                                        }}\r\n                                        onClick={regenerateQuestions}\r\n                                    >\r\n                                        <IoMdRefresh color=\"blue\" />  Re-generate sample questions\r\n                                    </button>\r\n                                    <p>Type In your question below:</p>\r\n                                    <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '0px' }}>\r\n                                        <TextField\r\n                                            onChange={(e) => setSearch(e.target.value)}\r\n                                            variant=\"outlined\"\r\n                                            value={search}\r\n                                            sx={{\r\n                                                width: '500px',\r\n                                                '& .MuiOutlinedInput-root:hover fieldset': {\r\n                                                    borderColor: 'rgb(69, 69, 69)',\r\n                                                },\r\n                                                '& .MuiOutlinedInput-root.Mui-focused fieldset': {\r\n                                                    outline: 'none',\r\n                                                    boxShadow: 'none',\r\n                                                    border: search ? '1px solid rgb(48, 36, 139)' : '1px solid rgb(69, 69, 69)',\r\n                                                },\r\n                                                '& .MuiOutlinedInput-root': {\r\n                                                    paddingRight: '10px',\r\n                                                    height: \"45px\"\r\n                                                },\r\n                                            }}\r\n                                            placeholder=\"Type here to ask Gen AI.............\"\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IoMdSend size={24} style={{ color: search ? \"rgb(91, 71, 245)\" : 'rgb(142, 139, 157)', cursor: 'pointer' }} onClick={() => { handleQuestionClick(search); setSearch(\"\") }} />\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"answersSection\" style={{ marginTop: \"20px\" }}>\r\n                                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n                                            <h2 style={{ fontSize: '30px' }}>Answers</h2>\r\n                                            <button className=\"btn btn-primary\" onClick={() => setAnswers([])}>Reset</button>\r\n                                        </div>\r\n                                        {answers?.map((item, index) => (\r\n                                            <AnswersAccordion key={index} question={item.question} answer={item.answer} loading={item?.loading} type={item.view} name={\"genbi\"}/>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div> : <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\r\n                                <CircularProgress />\r\n                            </div>}\r\n                        </div>}\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ChatDataPrep;\r\n","import { Modal, Checkbox } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport \"./CleanDataPopup.css\"; // Importing the CSS styles\r\n\r\nexport const CleanDataPopup = ({ showModal, setShowModal, onCleanData }) => {\r\n  const [options, setOptions] = useState({\r\n    standardizeDateColumns: true,\r\n    removeNulls: true,\r\n    replaceExcessCategories: true,\r\n    removeConstantColumns: true,\r\n    removeUnreadableColumns: true,\r\n  });\r\n\r\n  const handleOptionChange = (e) => {\r\n    setOptions({\r\n      ...options,\r\n      [e.target.name]: e.target.checked,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title={<h3 className=\"clean-popup-title\">Clean Dataset</h3>}\r\n        open={showModal}\r\n        centered\r\n        onCancel={() => setShowModal(false)}\r\n        className=\"clean-data-modal\"\r\n        footer={[\r\n          <button\r\n            key=\"clean\"\r\n            onClick={() => onCleanData(options)}\r\n            className=\"btn btn-primary clean-popup-btn\"\r\n          >\r\n            Preview Cleaned Data\r\n          </button>,\r\n        ]}\r\n      >\r\n        <div className=\"clean-popup-content\">\r\n          <Checkbox\r\n            name=\"standardizeDateColumns\"\r\n            checked={options.standardizeDateColumns}\r\n            onChange={handleOptionChange}\r\n            className=\"clean-popup-checkbox\"\r\n          >\r\n            Date Standardization\r\n          </Checkbox>\r\n\r\n          <Checkbox\r\n            name=\"removeNulls\"\r\n            checked={options.removeNulls}\r\n            onChange={handleOptionChange}\r\n            className=\"clean-popup-checkbox\"\r\n          >\r\n            Delete Null Rows\r\n          </Checkbox>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport Navbar from './Navbar'\r\nimport BarGraph from './BarGraph'\r\nimport { useDataAPI } from '../contexts/GetDataApi'\r\nimport EndPopup from './EndPopup'\r\nimport { Button } from '@mui/material'\r\nimport { Spin, Modal, Input, Progress } from 'antd'\r\nimport { AiOutlineClear } from \"react-icons/ai\"\r\nimport { BsStars } from 'react-icons/bs'\r\nimport { PivotView } from './popups/pivotVIew'\r\nimport ChatDataPrep from './popups/chatdataprep'\r\nimport { getFinalData } from '../../../../utils/const'\r\nimport '../styles/discover.scss'\r\nimport { CleanDataPopup } from './popups/cleandata'\r\nconst DisplayData = () => {\r\n  const [data, setData] = useState([])\r\n  const [headers, setHeaders] = useState([])\r\n  const [hoveredRowIndex, setHoveredRowIndex] = useState(-1);\r\n  const [displaypopup, setDisplaypopup] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [popup, setPopup] = useState(displaypopup)\r\n  const [prepData, setPrepData] = useState(\"\")\r\n  const [filename, setFilename] = useState(\"\")\r\n  const [open, setOpen] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [view, setView] = useState(false)\r\n  const [showModel, setShowModel] = useState(false)\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  const handleCleanButtonClick = () => {\r\n    setShowPopup(!showPopup);\r\n  };\r\n  const navigate = useNavigate()\r\n  const {\r\n    displayPopupFun,\r\n    displayContent,\r\n    handleCleanData,\r\n    handlePrepareData,\r\n    files\r\n  } = useDataAPI()\r\n\r\n  function removeDuplicates(arr) {\r\n    return [...new Set(arr)];\r\n  }\r\n\r\n  function count(arr, value) {\r\n    if (isNaN(value) && typeof (value) == 'number') {\r\n      return arr.filter(value => isNaN(value) && typeof (value) == 'number').length;\r\n    } else {\r\n      return arr.reduce((count, currtElm) => {\r\n        if (value === currtElm) {\r\n          count++\r\n        }\r\n        return count\r\n      }, 0)\r\n    }\r\n  }\r\n\r\n  const handleChatprepData = () => {\r\n    localStorage.setItem('prepData', JSON.stringify(data));\r\n    setShowModel(true);\r\n  }\r\n  const handleOk = async () => {\r\n    // setModalText('The modal will be closed after two seconds');\r\n    // setPrepData(e.)\r\n    setConfirmLoading(true)\r\n    await handlePrepareData(prepData)\r\n    setTimeout(() => {\r\n      setConfirmLoading(false)\r\n    }, 2000)\r\n    setOpen(false)\r\n  };\r\n\r\n  const handleRowHover = (index) => {\r\n    setHoveredRowIndex(index);\r\n  };\r\n\r\n  const convertToCSV = (data, headers) => {\r\n    const csvContent = [];\r\n    const header = Object.keys(data[0]);\r\n    csvContent.push(headers.join(','));\r\n\r\n    data.forEach((item) => {\r\n      const row = header.map((key) => item[key]);\r\n      csvContent.push(row.join(','));\r\n    });\r\n\r\n    return csvContent.join('\\n');\r\n  };\r\n\r\n  const downloadCSV = () => {\r\n    const filteredData = data.map((field) => {\r\n      return headers.map((header) => {\r\n        return field[header]\r\n      })\r\n    })\r\n\r\n    const csvData = convertToCSV(filteredData, headers);\r\n    const blob = new Blob([csvData], { type: 'text/csv' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = 'data.csv';\r\n\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    setHeaders(displayContent.headers)\r\n    setData(displayContent.data)\r\n    setFilename(localStorage.getItem(\"filename\"))\r\n\r\n    setTimeout(() => {\r\n      setLoading(false)\r\n    }, 2000)\r\n\r\n  }, [displayContent])\r\n\r\n  useEffect(() => {\r\n    setPopup(displaypopup)\r\n  }, [displaypopup])\r\n\r\n  const handleClearedData = async () => {\r\n    const data = await handleCleanData()\r\n    setData(data?.displayContent?.data)\r\n    const rowsRemoved = data?.displayContent?.rowsRemoved || 0;\r\n    alert(`Rows removed: ${rowsRemoved}`);\r\n  }\r\n\r\n  console.log(showPopup)\r\n  return (\r\n    <div style={{ minHeight: '90vh', overflow: 'auto' }}>\r\n      <Navbar />\r\n      <div className=\"professional-table\">\r\n        <div className=\"file-details ms-2\">\r\n          {/* <img src=\"/keyPulse.png\" onClick={() => {\r\n            navigate(\"/\")\r\n          }} style={{ cursor: \"pointer\" }} alt=\"KeyPulse\" width={150} height={65} /> */}\r\n          <p>{filename}</p>\r\n          <p>{data.length} rows</p>\r\n          <p>{headers.length} columns</p>\r\n\r\n        </div>\r\n        <div className=\"filterData ms-2\">\r\n          <Button variant=\"outlined\" onClick={() => {\r\n            handleChatprepData()\r\n          }}>Chat Data Prep</Button>\r\n          <div className=\"clean-section\" onClick={() => {\r\n            handleCleanButtonClick()\r\n          }}>\r\n            <AiOutlineClear size={25} />\r\n            <span>Clean</span>\r\n          </div>\r\n\r\n          <button className='btn btn-success' onClick={downloadCSV}>Download CSV</button>\r\n          <button className='btn btn-transparent' style={{ border: '1px solid grey' }} onClick={() => setView(!view)}>{!view ? 'General View' : 'Data View'}</button>\r\n        </div>\r\n\r\n        {loading ? <Spin className='spinner' size={'large'} /> :\r\n          <div className=''>\r\n            {!view ? <table style={{ border: 'none' }} className='discover-table'>\r\n              <thead>\r\n                <tr style={{ zIndex: 9999999 }}>\r\n                  {\r\n                    headers.map((header, index) => {\r\n                      return <th key={index}>{header}</th>\r\n                    })\r\n                  }\r\n                </tr>\r\n                <tr>\r\n                  {\r\n                    headers.map((header, index) => {\r\n                      const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n                      const updatedArray = data.map((value) => {\r\n                        const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n                        if (!isNaN(value[header])) {\r\n                          return parseInt(value[header])\r\n                        }\r\n                        else if (!isNaN(Date.parse(value[header]))) {\r\n                          const date = new Date(value[header])\r\n                          return date.getDate()\r\n                        }\r\n                        else if (timePattern.test(value[header])) {\r\n                          return parseInt(value[header].slice(0, 3))\r\n                        }\r\n                        else {\r\n                          return value[header]\r\n                        }\r\n                      })\r\n\r\n                      let uniqueArr = removeDuplicates(updatedArray)\r\n\r\n                      if (!isNaN(data[0][header])) {\r\n                        return <td key={index}><span className=\"badge rounded-pill\" style={{ background: '#27ae60' }}>Number</span> </td>\r\n                      }\r\n                      else if (!isNaN(Date.parse(data[0][header]))) {\r\n                        return <td key={index}><span className=\"badge rounded-pill bg-secondary\">Date</span></td>\r\n                      }\r\n                      else if (timePattern.test(data[0][header])) {\r\n                        return <td key={index}><span className=\"badge rounded-pill bg-danger\">Time</span></td>\r\n                      }\r\n                      else if (uniqueArr.length < 10 && isNaN(data[0][header])) {\r\n                        return <td key={index}><span className=\"badge rounded-pill\" style={{ background: 'hsl(10.1, 87.6%, 58.8%)' }}>Category</span> </td>\r\n                      }\r\n                      else if (isNaN(data[0][header])) {\r\n                        return <td key={index}><span className=\"badge rounded-pill bg-primary\">Text</span></td>\r\n                      }\r\n\r\n                    })\r\n                  }\r\n\r\n                </tr>\r\n                <tr>\r\n                  {\r\n                    headers.map((header, id) => {\r\n                      const updatedArray = data.map((value) => {\r\n                        const timePattern = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n                        if (!isNaN(value[header])) {\r\n                          return parseFloat(value[header])\r\n                        }\r\n                        else if (!isNaN(Date.parse(value[header]))) {\r\n                          const date = new Date(value[header])\r\n                          return date\r\n                        }\r\n                        else if (timePattern.test(value[header])) {\r\n                          return parseFloat(value[header].slice(0, 3))\r\n                        }\r\n                        else {\r\n                          return value[header]\r\n                        }\r\n                      })\r\n                      // console.log(updatedArray)\r\n\r\n                      let uniqueArr = removeDuplicates(updatedArray)\r\n                      if (!isNaN(Date.parse(data[0][header])) || !isNaN(data[0][header])) {\r\n                        const isDate = isNaN(data[0][header]);\r\n                        const updatedData = uniqueArr.map((uniVal) => {\r\n                          return {\r\n                            value: uniVal,\r\n                            count: count(updatedArray, uniVal)\r\n                          }\r\n                        })\r\n                        if (isDate) {\r\n                          // console.log(updatedData)\r\n                        }\r\n                        const finalData = getFinalData(updatedArray, isDate, 6)\r\n                        return (\r\n                          <td className='firstRow' style={{ overflowX: \"hidden\", cursor: \"pointer\" }} key={id}\r\n                            onClick={() => {\r\n                              displayPopupFun({\r\n                                rows: data.length,\r\n                                uniqueValues: uniqueArr.length,\r\n                                uniqueArr: uniqueArr,\r\n                                updatedData: updatedData,\r\n                                updatedArray: updatedArray,\r\n                                title: header,\r\n                                progress: false,\r\n                                totData: data,\r\n                                category: false,\r\n                                isDate: isDate\r\n                              })\r\n                              setPopup(displaypopup)\r\n                              setDisplaypopup(true)\r\n                            }}\r\n                          >\r\n                            {/* <p>{uniqueArr.length} Unique Values</p> */}\r\n                            <BarGraph data={finalData} strokeColor={'rgba(0, 163, 255, 1)'} width={180} className=\"graph\" cursor={'pointer'} header={header} />\r\n                          </td>)\r\n                      }\r\n                      else {\r\n                        const filteredArr = uniqueArr.filter((uniqueVal) => {\r\n                          return uniqueVal !== undefined && uniqueVal !== \"\";\r\n                        });\r\n                        const arr = filteredArr.map((uniqueVal, index) => {\r\n                          let value = count(updatedArray, uniqueVal)\r\n                          let percent = parseFloat((value / (updatedArray.length)) * 100).toFixed(1)\r\n                          return percent\r\n                        })\r\n                        if (arr.includes(\"0.00\")) {\r\n                          const index = arr.indexOf(\"0.00\")\r\n                          arr.splice(index, 1)\r\n                        }\r\n                        return <td className='firstRow' style={{ overflowX: \"auto\", cursor: \"pointer\" }} key={id}\r\n                          onClick={() => {\r\n                            displayPopupFun({\r\n                              rows: data.length,\r\n                              uniqueValues: uniqueArr.length,\r\n                              uniqueArr: uniqueArr,\r\n                              updatedData: arr,\r\n                              title: header,\r\n                              progress: true,\r\n                              totData: data,\r\n                              correlations: uniqueArr.length < 10,\r\n                            })\r\n                            setPopup(displaypopup)\r\n                            setDisplaypopup(true)\r\n                          }}\r\n                        >\r\n                          <div className=\"first-container\">\r\n                            {/* <span>{arr.length} Unique Values</span> */}\r\n                            {arr.map((percentValue, index) => {\r\n                              if (index < 2) {\r\n                                let name = (typeof uniqueArr[index] === 'number' && isNaN(uniqueArr[index])) ? 'blank' : uniqueArr[index];\r\n                                return (\r\n                                  <div className=\"progress-container\" key={index}>\r\n                                    <div style={{ width: '220px', display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>\r\n                                      <p title={name} style={{ width: '130px', overflow: 'hidden', whiteSpace: 'nowrap', display: 'flex', justifyContent: 'start' }}>\r\n                                        <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n                                          {name}\r\n                                        </span>\r\n                                      </p>\r\n                                      <p>{percentValue}%</p>\r\n                                    </div>\r\n                                    <Progress style={{ width: \"220px\" }} strokeColor={'#00a3f'} size=\"small\" showInfo={false} percent={percentValue} status=\"active\" />\r\n                                  </div>\r\n                                );\r\n                              } else if (index === 2) {\r\n                                // Calculate the total of the remaining values in arr\r\n                                let totalPercent = 100 - arr.slice(0, 2).reduce((acc, curr) => acc + parseFloat(curr), 0);\r\n                                return (\r\n                                  <div className=\"progress-container\" key={index}>\r\n                                    <div style={{ width: '220px', display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>\r\n                                      <p style={{ width: '130px', display: 'flex', justifyContent: 'start' }}>others</p>\r\n                                      <p>{totalPercent.toFixed(1)}%</p>\r\n                                    </div>\r\n                                    <Progress style={{ width: \"220px\" }} strokeColor={'#00a3f'} size=\"small\" showInfo={false} percent={totalPercent} status=\"active\" />\r\n                                  </div>\r\n                                );\r\n                              }\r\n                            })}\r\n\r\n                          </div>\r\n                        </td>\r\n                      }\r\n\r\n                    })\r\n\r\n                  }\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {data.map((row, index) => {\r\n                  return <tr\r\n                    key={index}\r\n                    className={index === hoveredRowIndex ? 'hovered' : ''}\r\n                    onMouseEnter={() => handleRowHover(index)}\r\n                    onMouseLeave={() => handleRowHover(-1)}\r\n                  >\r\n                    {\r\n                      headers.map((head, index) => {\r\n                        return <td key={index} >{row[head]}</td>\r\n                      })\r\n                    }\r\n\r\n                    {/* Add more data columns as needed */}\r\n                  </tr>\r\n                })}\r\n              </tbody>\r\n            </table> : <div>\r\n              <PivotView {...{ headers, data, removeDuplicates }} />\r\n            </div>}\r\n          </div>\r\n        }\r\n      </div>\r\n      {\r\n        displaypopup ? <EndPopup setDisplaypopup={setDisplaypopup} popup={popup} /> : <></>\r\n      }\r\n\r\n\r\n\r\n      <Modal\r\n        title=\"\"\r\n        open={open}\r\n        style={{ top: '40%', zIndex: 99999 }}\r\n        onCancel={() => setOpen(false)}\r\n        footer={[\r\n          <button\r\n            key=\"link\"\r\n            href=\"https://google.com\"\r\n            type=\"primary\"\r\n            loading={loading}\r\n            onClick={handleOk}\r\n            style={{ width: '100%' }}\r\n            className='btn btn-primary'\r\n          >\r\n            Upgrade Plan\r\n          </button>,\r\n        ]}\r\n      >\r\n        {/* <Input size='large' onChange={(e) => handleEvent(e)} value={prepData} type=\"text\" placeholder=\"e.g. Filter out all columns except the first 2\" /> */}\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n          <BsStars size={24} color='blue' style={{ marginTop: '20px', marginBottom: '10px' }} />\r\n          <p style={{ fontSize: '18px', fontWeight: '500' }}>This feature is not available for the view only plan.</p>\r\n          <p style={{ fontSize: '14px', fontWeight: '400' }}>Please Upgrade your plan to use this feature</p>\r\n        </div>\r\n      </Modal>\r\n      <>\r\n      </>\r\n      <ChatDataPrep {...{ showModel, setShowModel }} />\r\n      {showPopup &&\r\n        <CleanDataPopup\r\n          {...{\r\n            showModal:showPopup, setShowModal:setShowPopup,\r\n          }}\r\n          onClose={() => setShowPopup(false)}\r\n          onCleanData={(options) => {\r\n            handleCleanData(options);\r\n            setShowPopup(false);\r\n          }}\r\n        />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DisplayData","import React from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n  const location = useLocation()\r\n  return (\r\n    // <div className=\"nav-container ms-1\">\r\n    //   <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n    //     <div className=\"container-fluid\">\r\n    //       <div>\r\n    //         <Link to={location.pathname == '/predict' ? '/prepare':\"/business-intelligence\"} style={{ textDecoration: \"none\" }}>\r\n    //           {location.pathname !== '/' ? <button type='button' className=\"navbar-brand btn btn-primary text-white\"> Go Back</button> : <img src={'/keyPulse.png'} alt='Key Pulse' width={185} height={82} />}\r\n    //         </Link>\r\n    //         <Link to={\"/prepare\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Connect</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/predict\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Predict</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/deployment\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Deploy</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/settings/team/general\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Settings</button>}\r\n    //         </Link>\r\n\r\n    //       </div>\r\n    //     </div>\r\n    //   </nav>\r\n    // </div>\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Navbar","// extracted by mini-css-extract-plugin\nexport default {\"accordionItem\":\"AnswersAccordion_accordionItem__CBrUz\",\"accordionHeader\":\"AnswersAccordion_accordionHeader__1xSNZ\",\"accordionContent\":\"AnswersAccordion_accordionContent__M3Vbe\"};","import React, { useEffect, useState } from 'react';\r\nimport styles from '../styles/AnswersAccordion.module.css';\r\nimport { CircularProgress, Button } from '@mui/material';\r\n\r\nconst AnswersAccordion = ({ question, answer, loading, type ,name='savedImages'}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const imageUrl = answer;\r\n  const [isSaved, setIsSaved] = useState(false); // To manage save status\r\n\r\n  useEffect(() => {\r\n    // Check if the image is already saved in localStorage\r\n    const savedImages = JSON.parse(localStorage.getItem(name) || '[]');\r\n    setIsSaved(savedImages.includes(imageUrl));\r\n  }, [imageUrl]);\r\n\r\n  const saveImage = () => {\r\n    let savedImages = JSON.parse(localStorage.getItem(name) || '[]');\r\n\r\n    // Add the new image URL if it doesn't already exist\r\n    if (!savedImages.includes(imageUrl)) {\r\n      savedImages.push(imageUrl);\r\n      localStorage.setItem(name, JSON.stringify(savedImages));\r\n      setIsSaved(true); // Mark the image as saved\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.accordionItem}>\r\n      <div className={styles.accordionHeader} onClick={() => setIsOpen(!isOpen)}>\r\n        <span>{question}</span>\r\n        <span>{isOpen ? '-' : '+'}</span>\r\n      </div>\r\n      {isOpen && (\r\n        <div className={styles.accordionContent}>\r\n          {loading ? (\r\n            <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\r\n              <CircularProgress size={24} />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {type === 'Text' ? (\r\n                <div>{answer}</div>\r\n              ) : (\r\n                <>\r\n                  <div style={{display:'flex',justifyContent:'space-between',alignItems:'start'}}>\r\n                    <img src={imageUrl} width={700} height={500} alt='' />\r\n                    {!isSaved && (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={saveImage}\r\n                        style={{ marginTop: '10px' }}\r\n                      >\r\n                        Save Image\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                  {isSaved && <div style={{ marginTop: '10px' }}>Image already to Dashboard</div>}\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswersAccordion;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"questionBox\":\"SampleQuestion_questionBox__h4CCC\"};","import React from 'react';\r\nimport styles from '../styles/SampleQuestion.module.css';\r\n\r\nconst SampleQuestion = ({ question, onClick }) => {\r\n  return (\r\n    <button className={styles.questionBox} onClick={() => onClick(question)}>\r\n      {question}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SampleQuestion;\r\n","export const akkiourl=\"http://18.142.251.129:3001/api\"\r\nexport const keypulseurl=\"http://18.143.174.1:8000/api\"\r\n\r\nexport function getFinalData(uniqueArr, isDate, length) {\r\n  // Convert values to valid Date objects or numbers\r\n  const parsedArr = uniqueArr?.map(val => {\r\n    if (isDate) {\r\n      const date = new Date(val);\r\n      return isNaN(date.getTime()) ? null : date; // Return null for invalid dates\r\n    }\r\n    return !isNaN(val) ? Number(val) : null; // Convert valid numbers\r\n  }).filter(val => val !== null); // Filter out invalid values\r\n\r\n  // Sort the array\r\n  const sortedArr = parsedArr?.sort((a, b) => a - b); // Sorting works for both dates and numbers in JavaScript\r\n\r\n  // Make chunk size dynamic based on the 'length' argument\r\n  const chunkSize = Math.floor(sortedArr?.length / length); // Base size for each chunk\r\n  const remainder = sortedArr?.length % length; // Handle remainder that cannot be evenly divided into 'length'\r\n\r\n  const finalData = [];\r\n  let index = 0;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    // Each chunk takes an extra item if there are remaining items from the division\r\n    const currentChunkSize = i < remainder ? chunkSize + 1 : chunkSize;\r\n\r\n    // Get the current chunk\r\n    const chunk = sortedArr?.slice(index, index + currentChunkSize);\r\n\r\n    if (chunk?.length > 0) {\r\n      const minValue = chunk[0]; // First value (min) in sorted chunk\r\n      const nextChunk = sortedArr?.slice(index + currentChunkSize); // Look ahead to the next chunk\r\n      const nextMinValue = nextChunk?.length > 0 ? nextChunk[0] : chunk[chunk?.length - 1]; // Avoid duplicates by always taking the next distinct value\r\n\r\n      // Format dates properly if isDate is true\r\n      const formatDate = date => {\r\n        if (isDate) {\r\n          const d = new Date(date);\r\n          return d.toLocaleDateString('en-US'); // Use 'en-US' or any preferred locale\r\n        }\r\n        return date; // For numbers, return as is\r\n      };\r\n\r\n      // Ensure there's no duplicate label by checking if the nextMinValue is greater than the current minValue\r\n      const countInRange = sortedArr?.filter(val => val >= minValue && val < nextMinValue).length;\r\n\r\n      finalData.push({\r\n        value: isDate ? `${formatDate(minValue)}` : `${minValue}`, // Use formatted date or number\r\n        count: countInRange // Count of items between minValue and nextMinValue\r\n      });\r\n    }\r\n\r\n    index += currentChunkSize; // Move the index forward\r\n  }\r\n\r\n  return finalData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  "],"names":["_ref","_data$","_data$Math$floor","_data","_data$2","data","_ref$height","header","height","_ref$width","width","ticks","length","value","Math","floor","_jsxs","BarChart","style","margin","cursor","children","_jsx","XAxis","dataKey","tickFormatter","includes","tick","fontSize","tickLine","Tooltip","Bar","fill","barSize","cornerRadius","top","_state$totData","_headerData$","_state$updatedData","_state$updatedData$fi","setDisplaypopup","popup","displayPopup","useDataAPI","_useState","useState","_useState2","_slicedToArray","state","setState","console","log","useEffect","_objectSpread","calculatePearsonCorrelation","arr1","arr2","n","sum1","reduce","a","b","sum2","sum1Sq","sum2Sq","num","map","_","i","den","sqrt","headers","Object","keys","totData","finalHeaders","arr","updatedArray","isNaN","Date","parse","test","parseInt","slice","uniqueArr","_toConsumableArray","Set","filter","item","undefined","correlation","name","integer","headerData","title","corHeadrs","push","finalData","getFinalData","isDate","_Fragment","className","AiOutlineClose","size","onClick","rows","updatedData","find","obj","count","marginLeft","uniqueValues","padding","borderBottom","marginBottom","fontWeight","progress","index","display","justifyContent","alignItems","overflow","whiteSpace","textOverflow","Progress","strokeColor","showInfo","percent","status","BarGraph","header2","index2","_state$totData2","header1","arrf1","arrf2","forEach","val1","parseFloat","val2","error","correper","abs","toFixed","calculateCorrelationCoefficient","marginTop","concat","PivotView","removeDuplicates","pivotHeaders","timePattern","getDataType","type","_uniqueArr$filter","getDate","element","finData","border","zIndex","row","head","_localStorage$getItem","showModel","setShowModel","fileName","localStorage","getItem","replace","search","setSearch","_useState3","_useState4","setResponse","_useState5","_useState6","questions","setQuestions","_useState7","_useState8","answers","setAnswers","_useState9","_useState10","startChart","setStartChart","_useState11","_useState12","loading","setLoading","_useState13","_useState14","currentTab","setCurrentTab","_useState15","textQuestions","graphQuestions","_useState16","allQuestions","setAllQuestions","arrayToCSV","csvRows","join","_step","_iterator","_createForOfIteratorHelper","_loop","values","s","done","err","e","f","handleUpload","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileC","formData","csvData","file","wrap","_context","prev","next","FormData","Blob","append","axios","post","akkiourl","then","response","_response$data","_response$data2","text_questions","split","desc","trim","plotting_questions","t0","stop","_x","_x2","apply","arguments","storedData","parsedData","JSON","regenerateTextQuestions","_ref3","_callee2","_context2","_response$data3","regenerateGraphQuestions","_ref4","_callee3","_context3","_response$data4","handleGetAnswer","_ref5","_callee4","question","res","imageUrl","ans","_ans","_context4","responseType","sent","URL","createObjectURL","_res$data","view","answer","_x3","_x4","handleQuestionClick","_ref6","_callee5","_context5","_x5","Modal","open","onCancel","footer","Grid","md","sx","background","flexDirection","gap","CircularProgress","Tabs","onChange","event","newValue","textTransform","lineHeight","fontFamily","color","backgroundColor","svg","Tab","label","flexWrap","SampleQuestion","borderRadius","transition","IoMdRefresh","TextField","target","variant","borderColor","outline","boxShadow","paddingRight","placeholder","InputProps","endAdornment","InputAdornment","position","IoMdSend","AnswersAccordion","CleanDataPopup","showModal","setShowModal","onCleanData","standardizeDateColumns","removeNulls","replaceExcessCategories","removeConstantColumns","removeUnreadableColumns","options","setOptions","handleOptionChange","_defineProperty","checked","centered","Checkbox","setData","setHeaders","hoveredRowIndex","setHoveredRowIndex","displaypopup","setPopup","prepData","filename","setFilename","_useState17","_useState18","setOpen","_useState19","_useState20","setConfirmLoading","_useState21","_useState22","setView","_useState23","_useState24","_useState25","_useState26","showPopup","setShowPopup","_useDataAPI","useNavigate","displayPopupFun","displayContent","handleCleanData","handlePrepareData","files","currtElm","handleOk","setTimeout","handleRowHover","minHeight","Navbar","Button","setItem","stringify","AiOutlineClear","csvContent","key","convertToCSV","field","blob","url","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","Spin","id","uniqueVal","indexOf","splice","overflowX","correlations","percentValue","totalPercent","acc","curr","uniVal","category","onMouseEnter","onMouseLeave","EndPopup","BsStars","ChatDataPrep","onClose","useLocation","_ref$name","isOpen","setIsOpen","isSaved","setIsSaved","savedImages","styles","src","alt","parsedArr","val","date","getTime","Number","sortedArr","sort","chunkSize","remainder","currentChunkSize","chunk","minValue","nextChunk","nextMinValue","countInRange","toLocaleDateString"],"sourceRoot":""}