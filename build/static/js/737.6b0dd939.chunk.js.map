{"version":3,"file":"static/js/737.6b0dd939.chunk.js","mappings":"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","sources":["pages/BusinessIntelligence/components/components/Navbar.jsx","pages/BusinessIntelligence/components/deployments/newDeployment.js","utils/const.js"],"sourcesContent":["import React from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n  const location = useLocation()\r\n  return (\r\n    // <div className=\"nav-container ms-1\">\r\n    //   <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n    //     <div className=\"container-fluid\">\r\n    //       <div>\r\n    //         <Link to={location.pathname == '/predict' ? '/prepare':\"/business-intelligence\"} style={{ textDecoration: \"none\" }}>\r\n    //           {location.pathname !== '/' ? <button type='button' className=\"navbar-brand btn btn-primary text-white\"> Go Back</button> : <img src={'/keyPulse.png'} alt='Key Pulse' width={185} height={82} />}\r\n    //         </Link>\r\n    //         <Link to={\"/prepare\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Connect</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/predict\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Predict</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/deployment\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Deploy</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/settings/team/general\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Settings</button>}\r\n    //         </Link>\r\n\r\n    //       </div>\r\n    //     </div>\r\n    //   </nav>\r\n    // </div>\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React, { useEffect, useState } from 'react'\r\nimport Navbar from '../components/Navbar'\r\nimport { useDataAPI } from '../contexts/GetDataApi'\r\nimport '../styles/deployment.scss'\r\nimport { LuUpload } from \"react-icons/lu\";\r\nimport axios from 'axios';\r\nimport { akkiourl } from '../../../../utils/const';\r\n\r\nexport const CommonField = ({ name, value, setSelData, selData }) => {\r\n    const handleChange = (name, value) => {\r\n        setSelData(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n    return (\r\n        <div className='fieldContainerDepl'>\r\n            <p style={{ fontSize: '12px' }}>{name}</p>\r\n            {value === null ? (\r\n                <input\r\n                    className='deployScreenInput'\r\n                    name={name}\r\n                    placeholder={name}\r\n                    value={selData[name] || ''}\r\n                    onChange={(e) => handleChange(name, e.target.value)}\r\n                />\r\n            ) : (\r\n                <select\r\n                    name={name}\r\n                    value={selData[name] || ''}\r\n                    onChange={(e) => handleChange(name, e.target.value)}\r\n                    className='deployScreenSelectInput'\r\n                    placeholder={name}\r\n                >\r\n                    <option key={0}>--Select--</option>\r\n                    {value?.map((item, index) => (\r\n                        <option key={index + 1}>{item}</option>\r\n                    ))}\r\n                </select>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nconst NewDeploymentData = () => {\r\n    const [selData, setSelData] = useState({})\r\n    const [result, setResult] = useState([])\r\n    const name = localStorage.getItem(\"filename\").replace(/\\.[^/.]+$/, '')\r\n    let db = (name)\r\n    let db1 = (name)\r\n    let db2 = (name)\r\n    const predictItem = localStorage.getItem('predictItem')\r\n\r\n    const [totData, setTotData] = useState({\r\n        title: db1,\r\n        description: db2,\r\n        finSamplerows: [],\r\n        topFields: {\r\n            Feature: [],\r\n            Importance: []\r\n        }\r\n    })\r\n    // const [file, setFile] = useState(null)\r\n    const [selectedField, setSelectedField] = useState([])\r\n\r\n\r\n\r\n\r\n    const handleData = async () => {\r\n        const url = localStorage.getItem('url')\r\n        const response = await axios.post(`${akkiourl}/deployments/${url}`, {});\r\n        if (response.status === 200) {\r\n            console.log(response.data.columns)\r\n            setSelectedField(response?.data?.columns)\r\n        }\r\n    }\r\n\r\n    const handleDataPredict = async () => {\r\n        const url = localStorage.getItem('url')\r\n        const formData = new FormData();\r\n\r\n        Object.entries(selData).forEach(([key, value]) => formData.append(key, value))\r\n\r\n        const response = await axios.post(\r\n            `${akkiourl}/deployments/${url}/predict`,\r\n            formData,\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"multipart/form-data\"\r\n                }\r\n            }\r\n        );\r\n        if (response) {\r\n            setResult([response?.data?.result])\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        handleData()\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ minHeight: '90vh', overflow: 'auto', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n            <div className='col-md-8 rightContainer'>\r\n                <div className='rightttContainerDeploy' style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <h2 style={{ font: '500 36px \"Inter\", sans-serif', color: 'hsl(240, 46.3%, 8%)' }}>{totData.title}</h2>\r\n                    <h2 style={{ font: '400 14px \"Inter\", sans-serif', color: 'hsl(240, 10.3%, 38%)' }}>{totData.description}</h2>\r\n                    <div className='deployScreenContainer row' style={{ width: '100%', gap: '0px', margin: '0px',overflow:'auto' }}>\r\n                        <div className='deployScreenContainer row' style={{ width: '100%', gap: '0px', margin: '0px',overflow:'auto' }}>\r\n                            {Object.keys(selectedField)?.map((item) => (\r\n                                <div className='col-6' style={{ padding: '0px', margin: '0px' }}>\r\n                                    <CommonField key={item} name={item} value={selectedField[item]} selData={selData} setSelData={setSelData} />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <button className='deployPredictButton' onClick={handleDataPredict}>Predict</button>\r\n                    <div className='exportButtonDeploy'><LuUpload />  Upload CSV, XLSX or XLS</div>\r\n                </div>\r\n            </div>\r\n            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'start', alignItems: 'start', width: '100%', paddingLeft: '17%' }}>\r\n                {result.length > 0 &&\r\n                    <h2 style={{ fontSize: '28px', fontWeight: 600, marginTop: '10px', textDecoration: 'underline' }}> Prediction:</h2>\r\n                }\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    {result.map((item, index) => {\r\n                        return (\r\n                            <div >\r\n                                <h2 style={{ fontSize: '22px', fontWeight: 400, marginTop: '10px' }}>{predictItem} - {item}</h2>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewDeploymentData","export const akkiourl=\"http://18.142.251.129:3001/api\"\r\nexport const keypulseurl=\"http://18.143.174.1:8000/api\"\r\n\r\nexport function getFinalData(uniqueArr, isDate, length) {\r\n  // Convert values to valid Date objects or numbers\r\n  const parsedArr = uniqueArr?.map(val => {\r\n    if (isDate) {\r\n      const date = new Date(val);\r\n      return isNaN(date.getTime()) ? null : date; // Return null for invalid dates\r\n    }\r\n    return !isNaN(val) ? Number(val) : null; // Convert valid numbers\r\n  }).filter(val => val !== null); // Filter out invalid values\r\n\r\n  // Sort the array\r\n  const sortedArr = parsedArr?.sort((a, b) => a - b); // Sorting works for both dates and numbers in JavaScript\r\n\r\n  // Make chunk size dynamic based on the 'length' argument\r\n  const chunkSize = Math.floor(sortedArr?.length / length); // Base size for each chunk\r\n  const remainder = sortedArr?.length % length; // Handle remainder that cannot be evenly divided into 'length'\r\n\r\n  const finalData = [];\r\n  let index = 0;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    // Each chunk takes an extra item if there are remaining items from the division\r\n    const currentChunkSize = i < remainder ? chunkSize + 1 : chunkSize;\r\n\r\n    // Get the current chunk\r\n    const chunk = sortedArr?.slice(index, index + currentChunkSize);\r\n\r\n    if (chunk?.length > 0) {\r\n      const minValue = chunk[0]; // First value (min) in sorted chunk\r\n      const nextChunk = sortedArr?.slice(index + currentChunkSize); // Look ahead to the next chunk\r\n      const nextMinValue = nextChunk?.length > 0 ? nextChunk[0] : chunk[chunk?.length - 1]; // Avoid duplicates by always taking the next distinct value\r\n\r\n      // Format dates properly if isDate is true\r\n      const formatDate = date => {\r\n        if (isDate) {\r\n          const d = new Date(date);\r\n          return d.toLocaleDateString('en-US'); // Use 'en-US' or any preferred locale\r\n        }\r\n        return date; // For numbers, return as is\r\n      };\r\n\r\n      // Ensure there's no duplicate label by checking if the nextMinValue is greater than the current minValue\r\n      const countInRange = sortedArr?.filter(val => val >= minValue && val < nextMinValue).length;\r\n\r\n      finalData.push({\r\n        value: isDate ? `${formatDate(minValue)}` : `${minValue}`, // Use formatted date or number\r\n        count: countInRange // Count of items between minValue and nextMinValue\r\n      });\r\n    }\r\n\r\n    index += currentChunkSize; // Move the index forward\r\n  }\r\n\r\n  return finalData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  "],"names":["useLocation","_jsx","_Fragment","CommonField","_ref","name","value","setSelData","selData","handleChange","prevState","_objectSpread","_defineProperty","_jsxs","className","children","style","fontSize","placeholder","onChange","e","target","map","item","index","_Object$keys","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","result","setResult","localStorage","getItem","replace","db1","db2","predictItem","_useState5","title","description","finSamplerows","topFields","Feature","Importance","_useState6","totData","_useState7","_useState8","selectedField","setSelectedField","handleData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","_response$data","wrap","_context","prev","next","axios","post","concat","akkiourl","sent","status","console","log","data","columns","stop","apply","arguments","handleDataPredict","_ref3","_callee2","formData","_response$data2","_context2","FormData","Object","entries","forEach","_ref4","_ref5","key","append","headers","useEffect","minHeight","overflow","display","flexDirection","justifyContent","alignItems","font","color","width","gap","margin","keys","padding","onClick","LuUpload","paddingLeft","length","fontWeight","marginTop","textDecoration","getFinalData","uniqueArr","isDate","parsedArr","val","date","Date","isNaN","getTime","Number","filter","sortedArr","sort","a","b","chunkSize","Math","floor","remainder","finalData","_loop","currentChunkSize","i","chunk","slice","minValue","nextChunk","nextMinValue","countInRange","push","toLocaleDateString","count"],"sourceRoot":""}