{"version":3,"file":"static/js/911.91a93713.chunk.js","mappings":"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","sources":["assets/svg/topFactor.svg","pages/BusinessIntelligence/components/components/BarGraph.jsx","pages/BusinessIntelligence/components/components/Navbar.jsx","assets/svg/regression.svg","assets/svg/sampleRows.svg","pages/BusinessIntelligence/components/components/prediction/PredictData.jsx","pages/BusinessIntelligence/components/components/prediction/index.jsx","pages/BusinessIntelligence/components/datasets/index.js","utils/const.js","utils/index.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/clsx/dist/clsx.mjs"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgTopFactor(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 20 20\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6 8H1C0.45 8 0 8.45 0 9V11C0 11.55 0.45 12 1 12H6C6.55 12 7 11.55 7 11V9C7 8.45 6.55 8 6 8ZM19 2H14C13.45 2 13 2.45 13 3V5C13 5.55 13.45 6 14 6H19C19.55 6 20 5.55 20 5V3C20 2.45 19.55 2 19 2ZM19 5H14V3H19V5ZM6 14H1C0.45 14 0 14.45 0 15V17C0 17.55 0.45 18 1 18H6C6.55 18 7 17.55 7 17V15C7 14.45 6.55 14 6 14ZM6 2H1C0.45 2 0 2.45 0 3V5C0 5.55 0.45 6 1 6H6C6.55 6 7 5.55 7 5V3C7 2.45 6.55 2 6 2ZM10 0C9.45 0 9 0.45 9 1V19C9 19.55 9.45 20 10 20C10.55 20 11 19.55 11 19V1C11 0.45 10.55 0 10 0ZM19 14H14C13.45 14 13 14.45 13 15V17C13 17.55 13.45 18 14 18H19C19.55 18 20 17.55 20 17V15C20 14.45 19.55 14 19 14ZM19 17H14V15H19V17ZM19 8H14C13.45 8 13 8.45 13 9V11C13 11.55 13.45 12 14 12H19C19.55 12 20 11.55 20 11V9C20 8.45 19.55 8 19 8ZM19 11H14V9H19V11Z\",\n    fill: \"#101828\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTopFactor);\nexport default __webpack_public_path__ + \"static/media/topFactor.cfa15a6c0c0de9515562aeb152cb2889.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst BarChartComponent = ({ data, header, height = 180, width = 220 }) => {\r\n  // Calculate the tick values for the first, middle, and last data points\r\n  const ticks = data.length > 1 ? [\r\n    data[0]?.value, // First value\r\n    data[Math.floor(data.length / 2)]?.value, // Middle value\r\n    data[data.length - 1]?.value // Last value\r\n  ] : [data[0]?.value];\r\n\r\n  // Custom tick formatter to display only the desired ticks\r\n  const tickFormatter = (value) => {\r\n    return ticks.includes(value) ? value : '';\r\n  };\r\n\r\n  return (\r\n    <BarChart style={{ margin: \"auto\" }} cursor={'pointer'} width={width} height={height} data={data}>\r\n      <XAxis\r\n        dataKey='value'\r\n        tickFormatter={tickFormatter}\r\n        tick={{ fontSize: 12 }}\r\n        tickLine={false} // Hide the tick lines if needed\r\n      />\r\n      <Tooltip />\r\n      <Bar\r\n        cursor={'pointer'}\r\n        dataKey=\"count\"\r\n        fill='rgba(0, 163, 255, 1)' // RGBA color with full opacity (alpha = 1)\r\n        barSize={20}\r\n        cornerRadius={{ top: 5 }} // Apply top border radius\r\n      />\r\n    </BarChart>\r\n  );\r\n};\r\n\r\nexport default BarChartComponent;\r\n","import React from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n  const location = useLocation()\r\n  return (\r\n    // <div className=\"nav-container ms-1\">\r\n    //   <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n    //     <div className=\"container-fluid\">\r\n    //       <div>\r\n    //         <Link to={location.pathname == '/predict' ? '/prepare':\"/business-intelligence\"} style={{ textDecoration: \"none\" }}>\r\n    //           {location.pathname !== '/' ? <button type='button' className=\"navbar-brand btn btn-primary text-white\"> Go Back</button> : <img src={'/keyPulse.png'} alt='Key Pulse' width={185} height={82} />}\r\n    //         </Link>\r\n    //         <Link to={\"/prepare\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Connect</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/predict\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Predict</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/deployment\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Deploy</button>}\r\n    //         </Link>\r\n    //         <Link to={\"/settings/team/general\"} style={{ textDecoration: \"none\" }}>\r\n    //           {<button type='button' className=\"navbar-brand btn btn-primary text-white\"> Settings</button>}\r\n    //         </Link>\r\n\r\n    //       </div>\r\n    //     </div>\r\n    //   </nav>\r\n    // </div>\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Navbar","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRegression(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20,\n    height: 16,\n    viewBox: \"0 0 20 16\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M19 14H3.1L19.31 1.39L18.7 0.6L2 13.59V1C2 0.45 1.55 0 1 0C0.45 0 0 0.45 0 1V15C0 15.55 0.45 16 1 16H19C19.55 16 20 15.55 20 15C20 14.45 19.55 14 19 14ZM10 5C11.1 5 12 4.1 12 3C12 1.9 11.1 1 10 1C8.9 1 8 1.9 8 3C8 4.1 8.9 5 10 5ZM5 9C6.1 9 7 8.1 7 7C7 5.9 6.1 5 5 5C3.9 5 3 5.9 3 7C3 8.1 3.9 9 5 9ZM15 7C15 8.1 15.9 9 17 9C18.1 9 19 8.1 19 7C19 5.9 18.1 5 17 5C15.9 5 15 5.9 15 7ZM10 11C10 12.1 10.9 13 12 13C13.1 13 14 12.1 14 11C14 9.9 13.1 9 12 9C10.9 9 10 9.9 10 11Z\",\n    fill: \"black\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegression);\nexport default __webpack_public_path__ + \"static/media/regression.496ff241cc0bcbaba2e2f53360f5f345.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSampleRows(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 20 20\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 1H1C0.4 1 0 1.5 0 2V18C0 18.5 0.4 19 1 19H19C19.5 19 20 18.5 20 18V2C20 1.5 19.5 1 19 1ZM18 17H2V14H18V17ZM18 13H2V10H18V13ZM18 9H2V6H18V9Z\",\n    fill: \"#101828\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSampleRows);\nexport default __webpack_public_path__ + \"static/media/sampleRows.ed6f005d8585b044d36cd6c0c2bb1b1a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from 'react'\r\nimport BarGraph from '../BarGraph'\r\nimport Navbar from '../Navbar'\r\nimport { useDataAPI } from '../../contexts/GetDataApi'\r\nimport '../../styles/predictData.scss'\r\nimport regression from '../../../../../assets/svg/regression.svg'\r\nimport topFactors from '../../../../../assets/svg/topFactor.svg'\r\nimport sampleRows from '../../../../../assets/svg/sampleRows.svg'\r\nimport axios from 'axios'\r\nimport { transformData } from '../../datasets'\r\nimport { newSamplerowsCols } from '../../../../../utils'\r\nimport { akkiourl } from '../../../../../utils/const'\r\nconst PredictData = () => {\r\n\r\n    const [data, setData] = useState([])\r\n    const [headers, setHeaders] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [filename, setFilename] = useState(\"\")\r\n    const [totData, setTotData] = useState({\r\n        accuracy: 0,\r\n        sampleRows: {},\r\n        finSamplerows: [{}],\r\n        topFields: {\r\n            Features: [],\r\n            Importances: []\r\n        }\r\n    })\r\n\r\n    const name = localStorage.getItem(\"filename\")\r\n    const [selectedField, setSelectedField] = useState()\r\n    let db = (name)\r\n\r\n    const datann = [\r\n        { id: '25% ', name: 'sampledata.csv', freq: '40%', freq2: '45%' },\r\n        { id: '36% ', name: ' OKRDATA1707843206710.xlsx ', freq: '60%', freq2: '75%' },\r\n        { id: '42%', name: 'Name.csv', freq: '35%', freq2: '46%' },\r\n        { id: '53%', name: 'Dataset.xsxl', freq: '40%', freq2: '45%' },\r\n        { id: '66%', name: 'finalmodel.cscv', freq: '60%', freq2: '75%' },\r\n    ]\r\n\r\n    const sampleRowsData = [\r\n        { id1: 'Other ', id2: 'AUD', id4: '3', id5: 'Week Day', id6: 'Sunday' },\r\n        { id1: 'Other ', id2: ' AUD ', id4: '8', id5: 'Week Day', id6: 'Sunday' },\r\n        { id1: 'CA', id2: 'AUD', id4: 'id20', id5: 'Week Day', id6: 'Monday' },\r\n        { id1: 'UAS', id2: 'CAD', id4: 'id5', id5: 'Week Day', id6: 'Monday' },\r\n        { id1: 'Other', id2: 'CAD', id4: 'id5', id5: 'Week Day', id6: 'Tuesday' },\r\n    ]\r\n\r\n    const segmentsdata = [\r\n        { key: 'Fraudulent is 1', sim: '10.5x' },\r\n        { key: 'First Purchase is 1', sim: '4.5x' },\r\n        { key: 'Card Issuer is Amex', sim: '5.4x' },\r\n        { key: 'Online Purchase is 1', sim: '1.5x' },\r\n        { key: 'Avg value of Transaction Time is 13.49', sim: '+10.5%' }\r\n    ]\r\n\r\n    const handleSelect = (item) => {\r\n        setSelectedField(item)\r\n    }\r\n\r\n    const handleGetData = async () => {\r\n        const response = await axios.get(`http://${akkiourl}/predict/${db}`);\r\n        if (response.status === 200) {\r\n            const data = response.data?.columns\r\n            setHeaders(data)\r\n            setSelectedField(data[0])\r\n        }\r\n    }\r\n\r\n    const handleGetDataFinalData = async (id) => {\r\n        const response = await axios.get(`${akkiourl}/predict/${db}/${id.replace(' ', '_')}`);\r\n        if (response.status === 200) {\r\n            const data = response?.data?.data\r\n            const finSampleData = transformData(JSON.parse(data?.sample_rows)).slice(0, 15)\r\n            setTotData({\r\n                accuracy: data.accuracy,\r\n                topFields: JSON.parse(data['Top Fields']),\r\n                sampleRows: JSON.parse(data.sample_rows),\r\n                finSamplerows: finSampleData,\r\n                plot: data.Plot,\r\n                headers: Object.keys(data.sample_rows),\r\n                metrics: data?.metrics\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleGetData()\r\n    }, [])\r\n    useEffect(() => {\r\n        if (selectedField) {\r\n            handleGetDataFinalData(selectedField)\r\n        }\r\n    }, [selectedField])\r\n    const {\r\n        displayContent,\r\n    } = useDataAPI()\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        setHeaders(displayContent.headers)\r\n        setData(displayContent.data)\r\n        setFilename(localStorage.getItem(\"filename\"))\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 2000)\r\n\r\n    }, [displayContent])\r\n    return (\r\n        <div style={{ minHeight: '90vh', overflow: 'hidden' }}>\r\n            <Navbar />\r\n            <div className=\"professional-table ms-2\">\r\n                <div className=\"file-details\" style={{ borderBottom: '1px solid #e0eaf0' }}>\r\n                    <p>{filename}</p>\r\n                    <p>{data.length} rows</p>\r\n                    <p>{headers.length} columns</p>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className='col-md-3'>\r\n                    <div className='predictLeftCont'>\r\n                        <h1 className='predictHeader'>Predict</h1>\r\n                        <h2 className='predictSecondHeader'>Predict Fields</h2>\r\n                        <p className='paragraphText'>\r\n                            Select which numerical or categorical fields to predict and optionally ignore.\r\n                        </p>\r\n                        <div className='predictFieldsContainer'>\r\n                            <div style={{ alignItems: 'center' }}>\r\n                                <div className='px-2'>\r\n                                    <input data-v-27b19115=\"\" placeholder=\"Search fields...\" class=\"prediction-multiselect-searchbox\" />\r\n                                </div>\r\n                                <div style={{ maxHeight: 'calc(100vh - 380px)', overflow: 'auto', scrollbarWidth: 'thin', }} className='p-3 scrollHeight'>\r\n                                    {headers.map((item, index) => {\r\n                                        return (\r\n                                            <div className='d-flex p-2' style={{ cursor: 'pointer' }} onClick={() => handleSelect(item)}>\r\n                                                <div className={selectedField === item ? 'checkboxContainer checkboxTick' : 'checkboxContainer'}></div>\r\n                                                <h2 className='fieldText'>{item}</h2>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-md-9 rightContainer'>\r\n                    <div className='rightttconttt'>\r\n                        <div className='rightHeaderText'><img src={regression} alt='imag' /> Regression Summary</div>\r\n                        <h2 className='rightDesctext'>Below is a breakdown of how well the model predicted your prediction column.</h2>\r\n                        <div className='d-flex' style={{ gap: '10px', marginRight: '50px' }}>\r\n                            <div className='regressioncard'>\r\n                                <div className='regressionCardInnerContainer'>\r\n                                    <p className='cardFirstLineText'>{totData?.metrics || 'metrics'} is usually within</p>\r\n                                    <p className='cardLargeNumberText'> ±{(totData?.accuracy).toFixed(1)}% </p>\r\n                                    <p className='cardFirstLineText'> Predicted values were off by </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='regressioncard'>\r\n                                <div className='row justify-content-center align-items-center'>\r\n                                    <div className='col-7' >\r\n                                        <BarGraph data={[{ value: 0, count: 100 }, { value: 1, count: 150 }]} strokeColor={'rgba(0, 163, 255, 1)'} width={100} className=\"graph\" cursor={'pointer'} />\r\n                                    </div >\r\n                                    <div className='regressionCardInnerContainer col-5' >\r\n                                        <p className='secondcardFirstLineText'>Average Transaction Successfull</p>\r\n                                        <p className='secondcardLargeNumberText'> 65% </p>\r\n                                        <p className='secondcardFirstLineText'> Average Transaction Failed </p>\r\n                                        <p className='secondcardLargeNumberText'>  35%</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='rightHeaderText'><img src={topFactors} alt='imag' /> Top Fields</div>\r\n                            <h2 className='rightDesctext'> Individual factors ranked by their contribution to the prediction results </h2>\r\n                            <div className='regressioncard' style={{ width: '100%' }}>\r\n                                <div className='regressionCardInnerContainer'>\r\n                                    <table className='datasetTable'>\r\n                                        <thead className='datasetHeader'>\r\n                                            <tr>{Object.values(totData?.topFields['Features'])?.map((item, index) => {\r\n                                                return <th>{item}</th>\r\n                                            })}\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody className='datasetBody'>\r\n                                            <tr>{Object.values(totData?.topFields['Importances'])?.map((item, index) => {\r\n                                                return <td>{item}</td>\r\n                                            })}\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='rightHeaderText'><img src={sampleRows} alt='imag' /> Sample Rows</div>\r\n                            <h2 className='rightDesctext'>  Sample rows of your data sorted by predicted value of the outcome of interest. Drag the slider to inspect rows at different values.  </h2>\r\n                            <div className='regressioncard' style={{ width: '100%' }}>\r\n                                <div className='regressionCardInnerContainer'>\r\n                                    <table className='datasetTable'>\r\n                                        <thead className='datasetHeader'>\r\n                                            <tr>{Object.keys(totData?.finSamplerows[0])?.map((item) => {\r\n                                                return <th>{item}</th>\r\n                                            })}\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody className='datasetBody'>\r\n                                            {totData?.finSamplerows?.map((row, index) => {\r\n                                                if (row[Object.keys(totData?.finSamplerows[0])[0]] !== undefined || row[Object.keys(totData?.finSamplerows[0])[1]] !== undefined) {\r\n                                                    return (\r\n                                                        <tr>\r\n                                                            {newSamplerowsCols(Object.keys(totData?.finSamplerows[0]))?.map((col, key) => {\r\n                                                                return (\r\n                                                                    <td\r\n                                                                        key={key}\r\n                                                                        sx={{\r\n                                                                            minWidth: col?.minWidth,\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {col.render(\r\n                                                                            row,\r\n                                                                        )}\r\n                                                                    </td>\r\n                                                                );\r\n                                                            })}\r\n                                                        </tr>\r\n                                                    );\r\n                                                }\r\n                                            })}\r\n                                        </tbody>\r\n\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PredictData","import { useState } from \"react\"\r\nimport PredictData from \"./PredictData\"\r\n\r\nexport const PredictionAndForecast = () => {\r\n    const [type, setType] = useState('Forecast')\r\n    return (\r\n        <div>\r\n            {/* <div style={{ display: 'flex', alignItems: 'center', gap: '10px', padding: '10px' }}>\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '10px' }}>\r\n                    <input type=\"radio\" id=\"html\" name=\"fav_language\" value={type} checked={type ==='Predict'} onChange={()=>setType('Predict')}/>\r\n                    <label for=\"html\">Predict</label>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '10px', justifyContent: 'center' }}>\r\n                    <input type=\"radio\" id=\"css\" name=\"fav_language\" value={type} checked={type ==='Forecast'} onChange={()=>setType('Forecast')}/>\r\n                    <label for=\"css\">Forecast</label>\r\n                </div>\r\n            </div> */}\r\n          <PredictData />\r\n            {/* {type==='Forecast' && <ForecastData />} */}\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './styles.css'; // Import your CSS file for styling\r\nimport { MdDeleteOutline } from 'react-icons/md'\r\nimport moment from 'moment'\r\nimport axios from 'axios'\r\nexport const transformData = (data) => {\r\n    const transformedData = [];\r\n\r\n    // Get the keys (categories)\r\n    const keys = Object.keys(data);\r\n\r\n    // Assuming all categories have the same number of items\r\n    for (let i = 0; i < Object.values(data[keys[0]]).length; i++) {\r\n      const item = {};\r\n\r\n      // Iterate through each category\r\n      keys.forEach((key) => {\r\n        // Get the value for the current index in each category\r\n        const value = data[key][i];\r\n        \r\n        // Add the key-value pair to the item object\r\n        item[key] = value;\r\n      });\r\n\r\n      // Push the item object to the transformed data array\r\n      transformedData.push(item);\r\n    }\r\n\r\n    return transformedData;\r\n  };\r\nexport const Datasets = () => {\r\n    // Sample dataset for demonstration\r\n    const [datasets, setDatasets] = useState([\r\n        { id: 'tTaZ591iDv1c4iJj85Ip ', name: 'sampledata.csv', lastUpdate: '2024-02-25', dateCreated: '2024-01-01' },\r\n        { id: '6rVtP7IXgNiZEIakqW9G ', name: ' OKRDATA1707843206710.xlsx ', lastUpdate: '2024-02-24', dateCreated: '2024-01-15' },\r\n        { id: 'srVtP7IXgsiZEIakqW9G', name: 'Name.csv', lastUpdate: '2024-02-23', dateCreated: '2024-02-01' },\r\n        { id: '7HUHJJgNiZEIakqW9Gsn', name: 'Dataset.xsxl', lastUpdate: '2024-02-25', dateCreated: '2024-01-01' },\r\n        { id: 'ueP7IXgNiZEIakqW9Gaa', name: 'finalmodel.cscv', lastUpdate: '2024-02-24', dateCreated: '2024-01-15' },\r\n    ]);\r\n\r\n    // State for search input\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    // Handle search input change\r\n    const handleSearch = (e) => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // Filter datasets based on search term\r\n    const filteredDatasets = datasets.filter(dataset =>\r\n        dataset.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    // Function to delete a dataset\r\n    const handleDelete = (id) => {\r\n        setDatasets(datasets.filter(dataset => dataset.id !== id));\r\n    };\r\n\r\n\r\n    \r\n    const handleGetData = async () => {\r\n        const response = await axios.post('http://3.132.248.171:7500/tableinfo',{});\r\n        if (response.status === 200) {\r\n         const data= transformData(response.data).map((item)=>{\r\n            return({\r\n                ...item,datecreated:moment(item.datecreated).format(\"YY-MMM-DD\"),lastupdate:moment(item.lastupdate).format(\"YY-MMM-DD\")\r\n            })\r\n         })\r\n         setDatasets(data)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        handleGetData()\r\n    },[])\r\n\r\n    return (\r\n        <div className='w-100 datasets' style={{display:'flex',justifyContent:'center'}}>\r\n            <div className=\"dataset-page mx-5\" style={{ width: '80%'}}>\r\n                <h1 style={{ fontSize: '28px',marginTop:'10px' }}>Datasets</h1>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search datasets...\"\r\n                    value={searchTerm}\r\n                    onChange={handleSearch}\r\n                    className='datasetinput'\r\n                />\r\n                <table className='datasetTable'>\r\n                    <thead className='datasetHeader'>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>ID</th>\r\n                            <th>Last Update</th>\r\n                            <th>Date Created</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className='datasetBody'>\r\n                        {filteredDatasets.map(dataset => (\r\n                            <tr key={dataset.id}>\r\n                                <td>{dataset.name}</td>\r\n                                <td>{dataset.id}</td>\r\n                                <td>{dataset.lastupdate}</td>\r\n                                <td>{dataset.datecreated}</td>\r\n                                <td>\r\n                                    <MdDeleteOutline color='red' size={21} />\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};","export const akkiourl=\"http://18.142.251.129:3001/api\"\r\nexport const keypulseurl=\"http://18.143.174.1:8000/api\"\r\n\r\nexport function getFinalData(uniqueArr, isDate, length) {\r\n  // Convert values to valid Date objects or numbers\r\n  const parsedArr = uniqueArr?.map(val => {\r\n    if (isDate) {\r\n      const date = new Date(val);\r\n      return isNaN(date.getTime()) ? null : date; // Return null for invalid dates\r\n    }\r\n    return !isNaN(val) ? Number(val) : null; // Convert valid numbers\r\n  }).filter(val => val !== null); // Filter out invalid values\r\n\r\n  // Sort the array\r\n  const sortedArr = parsedArr?.sort((a, b) => a - b); // Sorting works for both dates and numbers in JavaScript\r\n\r\n  // Make chunk size dynamic based on the 'length' argument\r\n  const chunkSize = Math.floor(sortedArr?.length / length); // Base size for each chunk\r\n  const remainder = sortedArr?.length % length; // Handle remainder that cannot be evenly divided into 'length'\r\n\r\n  const finalData = [];\r\n  let index = 0;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    // Each chunk takes an extra item if there are remaining items from the division\r\n    const currentChunkSize = i < remainder ? chunkSize + 1 : chunkSize;\r\n\r\n    // Get the current chunk\r\n    const chunk = sortedArr?.slice(index, index + currentChunkSize);\r\n\r\n    if (chunk?.length > 0) {\r\n      const minValue = chunk[0]; // First value (min) in sorted chunk\r\n      const nextChunk = sortedArr?.slice(index + currentChunkSize); // Look ahead to the next chunk\r\n      const nextMinValue = nextChunk?.length > 0 ? nextChunk[0] : chunk[chunk?.length - 1]; // Avoid duplicates by always taking the next distinct value\r\n\r\n      // Format dates properly if isDate is true\r\n      const formatDate = date => {\r\n        if (isDate) {\r\n          const d = new Date(date);\r\n          return d.toLocaleDateString('en-US'); // Use 'en-US' or any preferred locale\r\n        }\r\n        return date; // For numbers, return as is\r\n      };\r\n\r\n      // Ensure there's no duplicate label by checking if the nextMinValue is greater than the current minValue\r\n      const countInRange = sortedArr?.filter(val => val >= minValue && val < nextMinValue).length;\r\n\r\n      finalData.push({\r\n        value: isDate ? `${formatDate(minValue)}` : `${minValue}`, // Use formatted date or number\r\n        count: countInRange // Count of items between minValue and nextMinValue\r\n      });\r\n    }\r\n\r\n    index += currentChunkSize; // Move the index forward\r\n  }\r\n\r\n  return finalData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  ","import React, { useState } from \"react\"\r\nimport { ApexChart } from \"../components/ApexBarChart\"\r\nimport { RxCross2 } from 'react-icons/rx'\r\nexport const getData = (list, color) => {\r\n    return <ul style={{ listStyle: \"none\" }} className='p-0 m-0 ps-1'>\r\n        {\r\n            list.map((item) => {\r\n                return <li className='m-0 p-0' style={{ fontFamily: \"poppins\", fontWeight: 400, fontSize: '12px', width: '190px' }}>- {item}</li>\r\n            })\r\n        }\r\n    </ul>\r\n}\r\nexport const getTitle = (title, color, handleClosr) => {\r\n    const handleClose = (e) => {\r\n        e.stopPropagation();\r\n        handleClosr()\r\n    }\r\n    return (\r\n        <div className=\"d-flex justify-content-between\">\r\n            <h5 style={{ fontFamily: \"Poppins\", fontWeight: 500, fontSize: '14px', display: 'flex', alignItems: \"center\", padding: 0, margin: 0 }}>\r\n                <div style={{ height: \"12px\", width: \"12px\", background: color, borderRadius: \"50%\", marginRight: \"5px\" }}></div>  {title}\r\n            </h5>\r\n            <RxCross2 cursor={\"pointer\"} color=\"\" onClick={(e) => handleClose(e)} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const GetOdometer = (data, opt, height = 150, hoverText) => {\r\n    const [hover, setHover] = useState(false)\r\n\r\n    var options = {\r\n        chart: {\r\n            height: 350,\r\n            type: 'radialBar',\r\n        },\r\n        colors: [\r\n            function ({ value, seriesIndex, dataPointIndex, w }) {\r\n                if (data[0] < 40) {\r\n                    return \"#d10f0f\";\r\n                } else if (data[0] > 70) {\r\n                    return \"#39c734\";\r\n                } else return \"#ffbf00\"\r\n            }\r\n        ],\r\n\r\n        plotOptions: {\r\n            radialBar: {\r\n                hollow: {\r\n                    margin: 15,\r\n                    size: \"60%\"\r\n                },\r\n\r\n                dataLabels: {\r\n                    showOn: \"always\",\r\n                    name: {\r\n                        offsetY: -10,\r\n                        show: false,\r\n                        color: \"#888\",\r\n                        fontSize: \"13px\"\r\n                    },\r\n                    value: {\r\n                        color: \"#111\",\r\n                        fontSize: \"20px\",\r\n                        show: true,\r\n                        offsetY: 8,\r\n                        offsetX: 40\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        stroke: {\r\n            lineCap: \"round\",\r\n        },\r\n    }\r\n    return (<div style={{ display: \"flex\", justifyContent: \"start\" }} onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)}>\r\n        <ApexChart series={data} options={opt ? opt : options} type='radialBar' height={height} width={\"\"} />\r\n        {hover && hoverText && <div className=\"card\" style={{ position: \"absolute\", padding: \"10px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"20px\", width: '200px', marginLeft: \"-30px\" }}>\r\n            <span style={{ fontFamily: 'Inter', marginTop: '5px', fontSize: '12px', lineHeight: '14px', fontWeight: 500, textAlign: \"center\" }}> {hoverText}</span>\r\n        </div>}\r\n    </div>)\r\n}\r\n\r\n\r\nexport const options3 = {\r\n    chart: {\r\n        // height: '400px',\r\n        // width:'100px',\r\n        type: 'bar'\r\n    },\r\n\r\n    colors: [\r\n        \"#faa93e\",\r\n        \"#427ae3\"\r\n    ],\r\n    plotOptions: {\r\n        bar: {\r\n            columnWidth: '5px',\r\n            horizontal: false,\r\n            borderRadius: 0,\r\n            borderRadiusApplication: 'around',\r\n            borderRadiusWhenStacked: 'last',\r\n            columnWidth: '40%',\r\n            barHeight: '50%',\r\n            distributed: false,\r\n            rangeBarOverlap: true,\r\n            rangeBarGroupRows: false,\r\n            hideZeroBarsWhenGrouped: false,\r\n            isDumbbell: false,\r\n            dumbbellColors: undefined,\r\n            isFunnel: false,\r\n            isFunnel3d: true,\r\n            dataLabels: {\r\n                position: 'top',\r\n            }\r\n        },\r\n    },\r\n    grid: {\r\n        show: false\r\n    },\r\n\r\n    dataLabels: {\r\n        style: {\r\n            fontSize: '12px',\r\n            colors: [\r\n                \"#faa93e\",\r\n                \"#427ae3\"\r\n            ],\r\n        },\r\n        offsetY: -20,\r\n        formatter: function (val, opt) {\r\n            const goals =\r\n                opt.w.config.series[opt.seriesIndex].data[opt.dataPointIndex]\r\n                    .goals\r\n            return `${val}`\r\n        }\r\n    },\r\n    yaxis: {\r\n        title: {\r\n            text: 'Units'\r\n        }\r\n    },\r\n    // colors: colors\r\n}\r\n\r\n\r\n\r\nexport const plantationData = (data, targetLine = false, value = \"\", color = \"\", name = \"Planned\") => {\r\n    const getData = (data) => {\r\n        const finalData = data[0].data.map((item, index) => {\r\n            return {\r\n                x: data[0].label[index].substring(0, 3),\r\n                y: item,\r\n                color: \"#41B883\",\r\n            }\r\n        })\r\n        return finalData\r\n    }\r\n    const max = Math.max(...data[0].data);\r\n    const months = data[0].data.map((item, index) => data[0].label[index].substring(0, 3))\r\n    const finalData = [\r\n        {\r\n            name: name,\r\n            data: months.map((item => {\r\n                return targetLine ? {\r\n                    x: item, y: value, color: color\r\n                } : {\r\n                    x: item, y: max\r\n                }\r\n            }))\r\n        },\r\n        {\r\n            name: 'Actual',\r\n            data: getData(data)\r\n        },\r\n    ]\r\n    return finalData\r\n}\r\n\r\n\r\nexport const customStyles = {\r\n    container: provided => ({\r\n        ...provided,\r\n        minWidth: 250,\r\n        maxWidth: 300,\r\n        // zIndex: 9999999999,\r\n        // Ensure the dropdown is rendered above other elements\r\n    }),\r\n    valueContainer: (provided, state) => ({\r\n        ...provided,\r\n        whiteSpace: \"nowrap\",\r\n        overflow: \"hidden\",\r\n        flexWrap: 'nowrap',\r\n    }),\r\n    menuPortal: base => ({\r\n        ...base,\r\n        zIndex: 99, // Ensure the dropdown is rendered above other elements\r\n    }),\r\n    menu: (base) => ({\r\n        ...base, zIndex: 999, // Ensure the dropdown is rendered above other elements\r\n    }),\r\n};\r\n\r\n\r\nexport const newSamplerowsCols = (headers) => {\r\n    return headers.map((item) => {\r\n        return  {\r\n                id: item,\r\n                columnLabel: 'Created On',\r\n                minWidth: 100,\r\n                rowSpan: true,\r\n                render: (row) => {\r\n                    return (\r\n                        <p>\r\n                            {row[item]}\r\n                        </p>\r\n                    );\r\n                },\r\n            }\r\n    });\r\n};","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","function _taggedTemplateLiteral(e, t) {\n  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {\n    raw: {\n      value: Object.freeze(t)\n    }\n  }));\n}\nexport { _taggedTemplateLiteral as default };","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"names":["_ref","_data$","_data$Math$floor","_data","_data$2","data","_ref$height","header","height","_ref$width","width","ticks","length","value","Math","floor","_jsxs","BarChart","style","margin","cursor","children","_jsx","XAxis","dataKey","tickFormatter","includes","tick","fontSize","tickLine","Tooltip","Bar","fill","barSize","cornerRadius","top","useLocation","_Fragment","_Object$values","_Object$values2","_Object$keys","_totData$finSamplerow","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","headers","setHeaders","_useState5","_useState6","setLoading","_useState7","_useState8","filename","setFilename","_useState9","accuracy","sampleRows","finSamplerows","topFields","Features","Importances","_useState10","totData","setTotData","name","localStorage","getItem","_useState11","_useState12","selectedField","setSelectedField","db","handleGetData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","_response$data","wrap","_context","prev","next","axios","get","concat","akkiourl","sent","status","columns","stop","apply","arguments","handleGetDataFinalData","_ref2","_callee2","id","_response$data2","_data2","finSampleData","_context2","replace","transformData","JSON","parse","sample_rows","slice","plot","Plot","Object","keys","metrics","_x","useEffect","displayContent","useDataAPI","setTimeout","minHeight","overflow","Navbar","className","borderBottom","alignItems","placeholder","class","maxHeight","scrollbarWidth","map","item","index","onClick","handleSelect","src","regression","alt","gap","marginRight","toFixed","BarGraph","count","strokeColor","topFactors","values","row","_newSamplerowsCols","undefined","newSamplerowsCols","col","key","sx","minWidth","render","PredictionAndForecast","PredictData","transformedData","_loop","i","forEach","push","Datasets","lastUpdate","dateCreated","datasets","setDatasets","searchTerm","setSearchTerm","filteredDatasets","filter","dataset","toLowerCase","post","_objectSpread","datecreated","moment","format","lastupdate","display","justifyContent","marginTop","type","onChange","e","target","MdDeleteOutline","color","size","getFinalData","uniqueArr","isDate","parsedArr","val","date","Date","isNaN","getTime","Number","sortedArr","sort","a","b","chunkSize","remainder","finalData","currentChunkSize","chunk","minValue","nextChunk","nextMinValue","countInRange","toLocaleDateString","_bar","columnWidth","horizontal","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","_defineProperty","position","columnLabel","rowSpan","_objectWithoutPropertiesLoose","r","t","n","hasOwnProperty","call","_taggedTemplateLiteral","freeze","defineProperties","raw","f","Array","isArray","o"],"sourceRoot":""}